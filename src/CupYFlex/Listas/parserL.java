
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package CupYFlex.Listas;

import Backend.Listas.AtributoLista;
import Backend.Listas.Lista;
import java.util.LinkedList;
import java_cup.runtime.*;
import CupYFlex.Listas.ErrorL;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\010\003\000\002\011" +
    "\004\000\002\011\003\000\002\007\011\000\002\006\005" +
    "\000\002\006\007\000\002\005\005\000\002\005\003\000" +
    "\002\004\005\000\002\004\005\000\002\004\007\000\002" +
    "\004\004\000\002\003\003\000\002\003\003\000\002\002" +
    "\005\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\017\004\001\002\000\004\004\012\001" +
    "\002\000\006\002\ufffe\017\ufffe\001\002\000\006\002\000" +
    "\017\004\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\017\uffff\001\002\000\004" +
    "\024\013\001\002\000\004\017\014\001\002\000\004\005" +
    "\016\001\002\000\004\020\050\001\002\000\004\024\017" +
    "\001\002\000\004\021\020\001\002\000\006\020\ufffc\025" +
    "\021\001\002\000\012\003\025\006\027\007\023\010\022" +
    "\001\002\000\004\024\046\001\002\000\004\024\042\001" +
    "\002\000\006\020\ufff9\025\ufff9\001\002\000\012\003\025" +
    "\006\027\007\023\010\022\001\002\000\006\020\ufffb\025" +
    "\037\001\002\000\004\024\030\001\002\000\004\015\031" +
    "\001\002\000\004\022\032\001\002\000\006\016\ufff1\025" +
    "\ufff1\001\002\000\006\016\035\025\034\001\002\000\004" +
    "\022\036\001\002\000\006\020\ufff6\025\ufff6\001\002\000" +
    "\006\016\ufff2\025\ufff2\001\002\000\012\003\025\006\027" +
    "\007\023\010\022\001\002\000\006\020\ufffa\025\ufffa\001" +
    "\002\000\006\020\ufff5\025\ufff5\001\002\000\006\011\043" +
    "\012\044\001\002\000\006\020\ufff4\025\ufff4\001\002\000" +
    "\006\020\ufff3\025\ufff3\001\002\000\006\020\ufff7\025\ufff7" +
    "\001\002\000\006\011\043\012\044\001\002\000\006\020" +
    "\ufff8\025\ufff8\001\002\000\004\020\051\001\002\000\006" +
    "\002\ufffd\017\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\010\007\004\010\006\011\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\023\005\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<String> avisos = new ArrayList();
    public ArrayList<Lista> listas = new ArrayList();

    public void syntax_error(Symbol s){
         if(s.value!= null){
            System.out.println(s  );
            String lexema = s.value.toString();
            int columna =  s.right;
            int fila = s.left;
            String red="\033[31m"; 
            System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
            avisos.add("ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo");
            ErrorL error = new ErrorL(lexema, fila, columna , "error Sintactico");
            ErrorL.tablaErrores.add(error);
         }else{
                  String lexema = s.value.toString();
            int columna =  s.right;
            int fila = s.left;
                  String red="\033[31m"; 
                 System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + "}"+ "\t\tFila " + 0 +"\t\tColumna: " +0+"simbolo"  );
                  avisos.add("ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + "}"+ "\t\tFila " + 0 +"\t\tColumna: " +0+"simbolo");
                ErrorL error = new ErrorL(lexema, fila, columna , "error Sintactico");
            ErrorL.tablaErrores.add(error);
            }
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorL error = new ErrorL(lexema, fila, columna , "error Sintactico");
        ErrorL.tablaErrores.add(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserL$actions {



  private final parserL parser;

  /** Constructor */
  CUP$parserL$actions(parserL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserL$do_action_part00000000(
    int                        CUP$parserL$act_num,
    java_cup.runtime.lr_parser CUP$parserL$parser,
    java.util.Stack            CUP$parserL$stack,
    int                        CUP$parserL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserL$result;

      /* select the action based on the action number */
      switch (CUP$parserL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)).right;
		ArrayList<Lista> start_val = (ArrayList<Lista>)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-1)).value;
		RESULT = start_val;
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserL$parser.done_parsing();
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpoInicio 
            {
              ArrayList<Lista> RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		ArrayList<Lista> listas = (ArrayList<Lista>)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		parser.listas=listas; RESULT= listas;
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("inicio",6, ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpoInicio ::= cuerpoInicio nuevaLista 
            {
              ArrayList<Lista> RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)).right;
		ArrayList<Lista> listas = (ArrayList<Lista>)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Lista l = (Lista)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                                     listas.add(l);
                                                     RESULT= listas;
                                            
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpoInicio",7, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpoInicio ::= nuevaLista 
            {
              ArrayList<Lista> RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Lista L = (Lista)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                                     ArrayList<Lista> listas = new ArrayList();
                                                     listas.add(L);
                                                     RESULT= listas;
                                            
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpoInicio",7, ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nuevaLista ::= LLAVEABRE LISTA DOSPUNTOS LLAVEABRE cuerpoL LLAVECIERRA LLAVECIERRA 
            {
              Lista RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).right;
		Lista lista = (Lista)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-2)).value;
		RESULT=lista; 
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("nuevaLista",5, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-6)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpoL ::= NOMBRE DOSPUNTOS CADENA 
            {
              Lista RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                   Lista lista=new Lista();
                                   AtributoLista at= new AtributoLista("nombre", nombre); 
                                   lista.Asignar(at);       
                                   RESULT= lista;
                           
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpoL",4, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpoL ::= NOMBRE DOSPUNTOS CADENA COMA cuerpoLista 
            {
              Lista RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Lista lista = (Lista)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                   AtributoLista at= new AtributoLista("nombre", nombre); 
                                   lista.Asignar(at);       
                                   RESULT= lista;
                           
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpoL",4, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-4)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpoLista ::= cuerpoLista COMA cuerpo 
            {
              Lista RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).right;
		Lista lista = (Lista)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		AtributoLista c = (AtributoLista)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                            lista.Asignar(c);
                                            RESULT= lista;
                                    
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpoLista",3, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpoLista ::= cuerpo 
            {
              Lista RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		AtributoLista c = (AtributoLista)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                            Lista lista=new Lista();
                                            lista.Asignar(c);
                                            RESULT= lista;
                                    
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpoLista",3, ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= ALEATORIA DOSPUNTOS verdaderoFalso 
            {
              AtributoLista RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object fv = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                   AtributoLista at= new AtributoLista("random", fv); 
                                    RESULT = at;
                           
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= CIRCULAR DOSPUNTOS verdaderoFalso 
            {
              AtributoLista RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object fv = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                   AtributoLista at= new AtributoLista("circular", fv); 
                                    RESULT = at;
                           
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= PISTAS DOSPUNTOS CORCHETEIZ pistas CORCHETEDER 
            {
              AtributoLista RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-1)).value;
		
                                   AtributoLista at= new AtributoLista("pistas", p); 
                                    RESULT = at;
                           
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-4)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= error cuerpo 
            {
              AtributoLista RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		AtributoLista c = (AtributoLista)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		RESULT = c;
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-1)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // verdaderoFalso ::= BOOLF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		RESULT = false;
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("verdaderoFalso",1, ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // verdaderoFalso ::= BOOLT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		RESULT = true;
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("verdaderoFalso",1, ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pistas ::= pistas COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parserL$stack.elementAt(CUP$parserL$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		p.add(id.toString()); RESULT = p;
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("pistas",0, ((java_cup.runtime.Symbol)CUP$parserL$stack.elementAt(CUP$parserL$top-2)), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pistas ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserL$stack.peek()).value;
		
                                            ArrayList<String> identificadores=new ArrayList();
                                            identificadores.add(id.toString());
                                            RESULT= identificadores;
                                    
              CUP$parserL$result = parser.getSymbolFactory().newSymbol("pistas",0, ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserL$stack.peek()), RESULT);
            }
          return CUP$parserL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserL$do_action(
    int                        CUP$parserL$act_num,
    java_cup.runtime.lr_parser CUP$parserL$parser,
    java.util.Stack            CUP$parserL$stack,
    int                        CUP$parserL$top)
    throws java.lang.Exception
    {
              return CUP$parserL$do_action_part00000000(
                               CUP$parserL$act_num,
                               CUP$parserL$parser,
                               CUP$parserL$stack,
                               CUP$parserL$top);
    }
}

}
