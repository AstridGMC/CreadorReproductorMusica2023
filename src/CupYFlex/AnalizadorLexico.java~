/* The following code was generated by JFlex 1.7.0 */

package CupYFlex;
import java_cup.runtime.* ;
import java_cup.runtime.Symbol;
import CupYFlex.sym;
import java.util.ArrayList;
import Backend.Pintor.PintarPalabras;
/*--------------2 Declaraciones ------------*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_MULTI = 2;
  public static final int COMENT_SIMPLE = 4;
  public static final int CADENA = 6;
  public static final int CHAR = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\107\1\11\1\27\1\12\1\13\22\0\1\1\1\102\1\4"+
    "\1\15\1\0\1\100\1\103\1\14\1\65\1\66\1\76\1\74\1\106"+
    "\1\7\1\73\1\77\12\2\1\105\1\104\1\6\1\75\1\10\1\0"+
    "\1\0\1\47\1\3\1\54\1\53\1\35\2\3\1\56\1\64\1\3"+
    "\1\44\1\62\1\55\1\3\1\60\1\37\1\3\1\57\1\52\2\3"+
    "\1\45\4\3\1\67\1\0\1\70\1\101\1\0\1\0\1\33\1\23"+
    "\1\34\1\32\1\30\1\41\1\46\1\51\1\21\1\63\1\44\1\25"+
    "\1\22\1\17\1\24\1\40\1\3\1\31\1\20\1\16\1\43\1\42"+
    "\1\50\1\36\1\3\1\61\1\71\1\5\1\72\7\0\1\27\113\0"+
    "\1\3\37\0\1\3\u1f27\0\1\14\2\0\1\26\13\0\1\27\1\27"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\26\4\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\1\27\1\30\1\31\1\2\2\32\1\33"+
    "\1\34\1\35\1\34\1\36\1\0\1\34\1\0\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\4\1\45\36\4"+
    "\1\46\1\47\1\0\1\50\1\51\1\0\1\52\1\53"+
    "\1\2\1\0\1\54\40\4\1\55\2\4\1\56\1\57"+
    "\1\2\1\0\1\60\1\61\24\4\1\62\6\4\1\63"+
    "\1\4\1\64\1\4\1\65\1\4\1\66\1\0\1\67"+
    "\15\4\1\70\7\4\1\71\2\4\1\72\1\73\1\4"+
    "\1\74\2\0\1\4\1\75\6\4\1\76\12\4\1\77"+
    "\1\4\1\100\1\4\1\0\1\4\1\101\1\4\1\102"+
    "\1\103\1\104\1\4\1\105\1\4\1\106\2\4\1\107"+
    "\1\4\1\110\4\4\1\0\1\4\1\111\1\112\1\113"+
    "\4\4\1\114\2\4\1\115\3\4\1\116\1\117\1\120"+
    "\1\4\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0168\0\u0288\0\u02d0\0\u0318\0\u0360\0\u0168\0\u03a8"+
    "\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8"+
    "\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828"+
    "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u09d8\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0a20\0\u0a68\0\u0168\0\u0168\0\u0168\0\u0ab0\0\u0168"+
    "\0\u0af8\0\u0168\0\u0168\0\u0168\0\u0b40\0\u0168\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u0c60"+
    "\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320"+
    "\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u0168"+
    "\0\u0168\0\u1560\0\u0168\0\u0168\0\u15a8\0\u0168\0\u0168\0\u15f0"+
    "\0\u1638\0\u0c18\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u0240\0\u1f80\0\u1fc8\0\u0168\0\u0168\0\u2010"+
    "\0\u2058\0\u0240\0\u0240\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0"+
    "\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400"+
    "\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u0240"+
    "\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u0240\0\u27f0"+
    "\0\u0240\0\u2838\0\u0240\0\u2880\0\u28c8\0\u2910\0\u0240\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98"+
    "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u0240\0\u2d00\0\u2d48\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u0240\0\u2ef8\0\u2f40\0\u0240"+
    "\0\u0240\0\u2f88\0\u0240\0\u2fd0\0\u3018\0\u3060\0\u0240\0\u30a8"+
    "\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u0240\0\u3258\0\u32a0"+
    "\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0"+
    "\0\u0240\0\u3528\0\u0240\0\u3570\0\u35b8\0\u3600\0\u0240\0\u3648"+
    "\0\u0240\0\u0240\0\u0240\0\u3690\0\u0240\0\u36d8\0\u0240\0\u3720"+
    "\0\u3768\0\u0240\0\u37b0\0\u0240\0\u37f8\0\u3840\0\u3888\0\u38d0"+
    "\0\u3918\0\u3960\0\u0240\0\u0240\0\u0240\0\u39a8\0\u39f0\0\u3a38"+
    "\0\u3a80\0\u0240\0\u3ac8\0\u3b10\0\u0240\0\u3b58\0\u3ba0\0\u3be8"+
    "\0\u0240\0\u0240\0\u0240\0\u3c30\0\u0240\0\u0240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\7\1\0\1\7\1\17\1\6\1\20\1\11"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\12\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\11\1\35"+
    "\1\36\1\37\1\40\1\11\1\41\1\42\1\11\1\32"+
    "\1\11\1\43\1\21\1\44\1\45\1\23\1\43\1\30"+
    "\1\25\1\11\1\26\1\11\1\22\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\6\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\7\70\1\71\111\70\1\72\2\0\13\70\1\0\60\70"+
    "\4\73\1\74\103\73\2\0\1\75\1\73\10\0\1\76"+
    "\1\77\2\73\1\100\5\73\2\0\35\73\134\0\1\7"+
    "\7\0\1\7\1\0\1\7\73\0\1\7\2\0\1\10"+
    "\70\0\1\101\16\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\35\11\30\0\1\102\111\0\1\103\65\0\1\104"+
    "\21\0\1\105\110\0\1\106\64\0\1\107\14\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\1\11\1\110\33\11"+
    "\25\0\2\11\1\0\1\11\10\0\3\11\1\111\4\11"+
    "\2\0\3\11\1\112\7\11\1\113\4\11\1\114\14\11"+
    "\25\0\2\11\1\0\1\11\10\0\4\11\1\115\3\11"+
    "\2\0\35\11\25\0\2\11\1\0\1\11\10\0\3\11"+
    "\1\116\4\11\2\0\1\117\34\11\25\0\2\11\1\0"+
    "\1\11\10\0\6\11\1\120\1\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\1\11\1\121"+
    "\33\11\25\0\2\11\1\0\1\11\10\0\6\11\1\122"+
    "\1\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\1\11\1\123\1\124\5\11\2\0\6\11\1\125\26\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\126"+
    "\34\11\25\0\2\11\1\0\1\11\10\0\6\11\1\127"+
    "\1\11\2\0\1\130\34\11\25\0\2\11\1\0\1\11"+
    "\10\0\2\11\1\131\5\11\2\0\1\11\1\132\33\11"+
    "\25\0\2\11\1\0\1\11\10\0\6\11\1\133\1\11"+
    "\2\0\3\11\1\134\31\11\25\0\2\11\1\0\1\11"+
    "\10\0\2\11\1\124\5\11\2\0\6\11\1\125\26\11"+
    "\25\0\2\11\1\0\1\11\10\0\3\11\1\135\4\11"+
    "\2\0\1\11\1\136\1\11\1\137\31\11\25\0\2\11"+
    "\1\0\1\11\10\0\3\11\1\135\4\11\2\0\1\11"+
    "\1\140\1\11\1\137\31\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\3\11\1\141\31\11\25\0\2\11"+
    "\1\0\1\11\10\0\6\11\1\142\1\11\2\0\1\143"+
    "\2\11\1\144\31\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\1\145\34\11\25\0\2\11\1\0\1\11"+
    "\10\0\6\11\1\142\1\11\2\0\3\11\1\144\31\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\3\11"+
    "\1\146\31\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\1\130\34\11\25\0\2\11\1\0\1\11\10\0"+
    "\6\11\1\133\1\11\2\0\3\11\1\147\31\11\117\0"+
    "\1\150\1\151\17\0\1\152\67\0\1\153\4\0\1\154"+
    "\1\155\11\0\1\156\75\0\1\157\5\0\1\7\7\0"+
    "\1\7\1\0\1\160\73\0\1\7\10\0\1\72\101\0"+
    "\1\75\123\0\2\73\111\0\1\161\70\0\1\162\107\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\13\11\1\163"+
    "\21\11\25\0\2\11\1\0\1\11\10\0\1\11\1\164"+
    "\6\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\7\11\1\165\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\4\11\1\166\3\11\2\0\35\11\25\0\2\11"+
    "\1\0\1\11\10\0\3\11\1\167\4\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\10\11"+
    "\1\170\24\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\1\171\34\11\25\0\2\11\1\0\1\11\10\0"+
    "\1\11\1\172\6\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\6\11\1\173\1\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\2\11\1\174"+
    "\32\11\25\0\2\11\1\0\1\11\10\0\1\11\1\175"+
    "\6\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\1\176\7\11\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\10\11\1\177\24\11\25\0\2\11"+
    "\1\0\1\11\10\0\1\200\7\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\201\7\11\2\0\10\11"+
    "\1\202\24\11\25\0\2\11\1\0\1\11\10\0\5\11"+
    "\1\203\2\11\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\2\11\1\204\5\11\2\0\11\11\1\205\23\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\4\11"+
    "\1\206\30\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\1\11\1\207\33\11\25\0\2\11\1\0\1\11"+
    "\10\0\1\11\1\210\6\11\2\0\35\11\25\0\2\11"+
    "\1\0\1\11\10\0\2\11\1\211\5\11\2\0\1\11"+
    "\1\212\1\213\32\11\25\0\2\11\1\0\1\11\10\0"+
    "\2\11\1\214\5\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\3\11\1\215\4\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\1\11\1\216"+
    "\33\11\25\0\2\11\1\0\1\11\10\0\3\11\1\217"+
    "\4\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\7\11\1\220\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\3\11\1\221\4\11\2\0\35\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\1\11\1\222\33\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\11"+
    "\1\223\33\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\1\224\34\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\4\11\1\225\30\11\25\0\2\11\1\0"+
    "\1\11\10\0\2\11\1\211\5\11\2\0\35\11\30\0"+
    "\1\226\205\0\1\227\5\0\1\7\7\0\1\230\1\0"+
    "\1\7\73\0\1\7\22\0\1\231\67\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\232\34\11\25\0\2\11"+
    "\1\0\1\11\10\0\6\11\1\233\1\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\3\11\1\234\4\11"+
    "\2\0\35\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\3\11\1\235\31\11\25\0\2\11\1\0\1\11"+
    "\10\0\1\236\7\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\3\11\1\237\31\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\11\1\240\6\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\2\11\1\241"+
    "\5\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\7\11\1\242\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\1\243\34\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\16\11\1\244\16\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\1\245\34\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\246"+
    "\34\11\25\0\2\11\1\0\1\11\10\0\3\11\1\247"+
    "\4\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\6\11\1\250\1\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\11\1\251\33\11\25\0"+
    "\2\11\1\0\1\11\10\0\7\11\1\252\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\4\11"+
    "\1\253\30\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\3\11\1\254\31\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\1\255\34\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\256\34\11\25\0\2\11"+
    "\1\0\1\11\10\0\1\257\7\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\6\11\1\260\1\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\3\11\1\261\31\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\1\262\34\11\25\0\2\11\1\0\1\11"+
    "\10\0\1\263\7\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\1\11\1\264\2\11\1\265\3\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\266\2\11\1\267\31\11\25\0\2\11\1\0\1\11"+
    "\10\0\4\11\1\265\3\11\2\0\35\11\25\0\2\11"+
    "\1\0\1\11\10\0\2\11\1\270\5\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\2\11"+
    "\1\271\32\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\2\11\1\272\32\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\10\11\1\273\24\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\1\274\34\11\24\0"+
    "\1\7\7\0\1\7\1\275\1\7\73\0\1\7\23\0"+
    "\1\276\66\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\11\1\277\33\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\1\11\1\300\33\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\4\11\1\301\30\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\1\11\1\302"+
    "\33\11\25\0\2\11\1\0\1\11\10\0\1\303\7\11"+
    "\2\0\35\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\3\11\1\304\31\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\1\305\34\11\25\0\2\11\1\0"+
    "\1\11\10\0\1\11\1\306\6\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\3\11\1\307\4\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\11\1\310\33\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\1\11\1\311\33\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\312\34\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\1\11\1\313\33\11"+
    "\25\0\2\11\1\0\1\11\10\0\6\11\1\314\1\11"+
    "\2\0\35\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\1\315\34\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\1\316\34\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\13\11\1\317\21\11\25\0\2\11"+
    "\1\0\1\11\10\0\1\11\1\320\6\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\16\11"+
    "\1\321\16\11\25\0\2\11\1\0\1\11\10\0\3\11"+
    "\1\322\4\11\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\4\11\1\323\30\11\25\0\2\11"+
    "\1\0\1\11\10\0\1\11\1\324\6\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\3\11"+
    "\1\325\31\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\4\11\1\326\30\11\25\0\2\11\1\0\1\11"+
    "\10\0\6\11\1\327\1\11\2\0\35\11\25\0\2\11"+
    "\1\0\1\11\10\0\2\11\1\330\5\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\6\11\1\331\1\11"+
    "\2\0\1\331\34\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\3\11\1\332\31\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\11\1\333\33\11\132\0"+
    "\1\334\24\0\1\335\65\0\2\11\1\0\1\11\10\0"+
    "\3\11\1\336\4\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\21\11\1\337\13\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\1\340\34\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\11"+
    "\1\341\33\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\33\11\1\342\1\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\3\11\1\343\31\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\3\11\1\344\31\11"+
    "\25\0\2\11\1\0\1\11\10\0\1\345\7\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\6\11\1\346"+
    "\1\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\3\11\1\347\31\11\25\0\2\11\1\0"+
    "\1\11\10\0\1\11\1\350\6\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\11\1\351\6\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\2\11\1\352\32\11\25\0\2\11\1\0\1\11\10\0"+
    "\1\11\1\353\6\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\7\11\1\354\2\0\35\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\2\11\1\355\32\11"+
    "\25\0\2\11\1\0\1\11\10\0\7\11\1\356\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\1\11\1\357"+
    "\6\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\1\360\7\11\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\3\11\1\361\31\11\25\0\2\11"+
    "\1\0\1\11\10\0\3\11\1\362\4\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\2\11\1\363\5\11"+
    "\2\0\35\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\2\11\1\364\32\11\36\0\1\365\121\0\1\73"+
    "\64\0\2\11\1\0\1\11\10\0\10\11\2\0\31\11"+
    "\1\366\3\11\25\0\2\11\1\0\1\11\10\0\2\11"+
    "\1\367\5\11\2\0\35\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\3\11\1\370\31\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\1\371\34\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\11\1\372\6\11\2\0"+
    "\35\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\11\1\373\33\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\13\11\1\374\21\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\11\1\375\33\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\2\11\1\376"+
    "\32\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\3\11\1\377\31\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\13\11\1\u0100\21\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\2\11\1\u0101\32\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\u0102\7\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\u0103"+
    "\34\11\25\0\2\11\1\0\1\11\10\0\6\11\1\u0104"+
    "\1\11\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\13\11\1\u0105\21\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\u0106\34\11\25\0\2\11"+
    "\1\0\1\11\10\0\10\11\2\0\10\11\1\u0107\24\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\u0108"+
    "\34\11\34\0\1\u0109\100\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\3\11\1\u010a\31\11\25\0\2\11\1\0"+
    "\1\11\10\0\2\11\1\u010b\5\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\2\11\1\u010c"+
    "\32\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\u010d\34\11\25\0\2\11\1\0\1\11\10\0\10\11"+
    "\2\0\4\11\1\u010e\30\11\25\0\2\11\1\0\1\11"+
    "\10\0\10\11\2\0\1\u010f\34\11\25\0\2\11\1\0"+
    "\1\11\10\0\1\11\1\u0110\6\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\10\11\2\0\3\11\1\u0111"+
    "\31\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\11\1\u0112\33\11\25\0\2\11\1\0\1\11\10\0"+
    "\10\11\2\0\3\11\1\u0113\31\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\11\1\u0114\33\11\35\0"+
    "\1\275\77\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\11\1\u0115\33\11\25\0\2\11\1\0\1\11\10\0"+
    "\3\11\1\u0116\4\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\1\11\1\u0117\6\11\2\0\35\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\u0118\7\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\11"+
    "\1\u0119\33\11\25\0\2\11\1\0\1\11\10\0\7\11"+
    "\1\u011a\2\0\35\11\25\0\2\11\1\0\1\11\10\0"+
    "\6\11\1\232\1\11\2\0\35\11\25\0\2\11\1\0"+
    "\1\11\10\0\10\11\2\0\1\11\1\u011b\33\11\25\0"+
    "\2\11\1\0\1\11\10\0\1\u011c\7\11\2\0\35\11"+
    "\25\0\2\11\1\0\1\11\10\0\10\11\2\0\1\u011d"+
    "\34\11\25\0\2\11\1\0\1\11\10\0\10\11\2\0"+
    "\1\u011e\34\11\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\4\1\1\11\26\1\6\11"+
    "\1\1\5\11\2\1\3\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\0\1\1\1\0\6\11\40\1\2\11"+
    "\1\0\2\11\1\0\2\11\1\1\1\0\44\1\2\11"+
    "\1\1\1\0\44\1\1\0\35\1\2\0\27\1\1\0"+
    "\23\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena="";
    public PintarPalabras pintar = new PintarPalabras();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol(int type, Object value, int fila, int columna) {
        return new Symbol(type, yyline, yycolumn, value);}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
  	yyline = 1; 
	yychar = 1; 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErrorS nuevoError= new ErrorS(yytext(),yyline,yychar,"lexico");
        ErrorS.tablaErrores.add(nuevoError);
	System.out.println("Este es un error lexico: "+yytext()+
	", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 83: break;
          case 2: 
            { 
            } 
            // fall through
          case 84: break;
          case 3: 
            { pintar.pintaMora(yychar,yylength()); System.out.println( "int"); return symbol(sym.ENTERO , yytext(), yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 4: 
            { System.out.println( "ID"); pintar.pintaVerde(yychar,yylength()); System.out.println( "id"); return symbol(sym.IDENTIFICADOR , yytext(), yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 5: 
            { yybegin(CADENA);pintar.pintaNara(yychar,yylength());
            } 
            // fall through
          case 87: break;
          case 6: 
            { return symbol(sym.MENOR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          case 7: 
            { return symbol(sym.MENOS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 89: break;
          case 8: 
            { return symbol(sym.MAYOR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 9: 
            { yybegin(CHAR);pintar.pintaNara(yychar,yylength());
            } 
            // fall through
          case 91: break;
          case 10: 
            { return symbol(sym.PARABRE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 92: break;
          case 11: 
            { return symbol(sym.PARCIERRA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 93: break;
          case 12: 
            { return symbol(sym.CORCHETEIZ, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 94: break;
          case 13: 
            { return symbol(sym.CORCHETEDER, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 95: break;
          case 14: 
            { return symbol(sym.LLAVEABRE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 96: break;
          case 15: 
            { return symbol(sym.LLAVECIERRA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 97: break;
          case 16: 
            { return symbol(sym.MAS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 98: break;
          case 17: 
            { return symbol(sym.IGUAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 99: break;
          case 18: 
            { return symbol(sym.ASTERISCO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 100: break;
          case 19: 
            { return symbol(sym.DIV, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 101: break;
          case 20: 
            { return symbol(sym.MODULO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 102: break;
          case 21: 
            { return symbol(sym.POT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 103: break;
          case 22: 
            { return symbol(sym.NOT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 104: break;
          case 23: 
            { return symbol(sym.PUNTOYCOMA, yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 105: break;
          case 24: 
            { return symbol(sym.DOSPUNTOS, yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 106: break;
          case 25: 
            { return symbol(sym.COMA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 107: break;
          case 26: 
            { pintar.pintaGris(yychar,yylength());
            } 
            // fall through
          case 108: break;
          case 27: 
            { pintar.pintaGris(yychar,yylength()); yybegin(YYINITIAL);
            } 
            // fall through
          case 109: break;
          case 28: 
            { pintar.pintaNara(yychar,yylength());
            } 
            // fall through
          case 110: break;
          case 29: 
            { pintar.pintaNara(yychar,yylength()); yybegin(YYINITIAL);return symbol(sym.CADENA , yytext(), yyline, yycolumn);
            } 
            // fall through
          case 111: break;
          case 30: 
            { pintar.pintaNara(yychar,yylength()); yybegin(YYINITIAL);return symbol(sym.CHAR , yytext(), yyline, yycolumn);
            } 
            // fall through
          case 112: break;
          case 31: 
            { System.out.println( "OR"+ yytext()); return symbol(sym.OR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 113: break;
          case 32: 
            { yybegin(COMENT_MULTI);pintar.pintaGris(yychar,yylength());
            } 
            // fall through
          case 114: break;
          case 33: 
            { return symbol(sym.MENORIGUAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 115: break;
          case 34: 
            { return symbol(sym.MENOSMENOS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 116: break;
          case 35: 
            { yybegin(COMENT_SIMPLE); pintar.pintaGris(yychar,yylength());
            } 
            // fall through
          case 117: break;
          case 36: 
            { return symbol(sym.MAYORIGUAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 118: break;
          case 37: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.IF, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 119: break;
          case 38: 
            { return symbol(sym.SUMASUMA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 120: break;
          case 39: 
            { return symbol(sym.MASIGUAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 121: break;
          case 40: 
            { return symbol(sym.NOIGUAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 122: break;
          case 41: 
            { return symbol(sym.ESNULO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 123: break;
          case 42: 
            { System.out.println( "XOR"+ yytext());return symbol(sym.XOR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 124: break;
          case 43: 
            { return symbol(sym.AND, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 125: break;
          case 44: 
            { pintar.pintaMora(yychar,yylength()); return symbol(sym.DECIMAL , yytext(), yyline, yycolumn);
            } 
            // fall through
          case 126: break;
          case 45: 
            { System.out.println( "VAR"+ yytext()); pintar.pintaAzul(yychar,yylength()); return symbol(sym.VAR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 127: break;
          case 46: 
            { System.out.println( "NOR"+ yytext()); return symbol(sym.NOR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 128: break;
          case 47: 
            { System.out.println( "NAND"+ yytext()); return symbol(sym.NAND, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 129: break;
          case 48: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.BOOLT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 130: break;
          case 49: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.ELSE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 131: break;
          case 50: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.CASO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 132: break;
          case 51: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.PARA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 133: break;
          case 52: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.VOID, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 134: break;
          case 53: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.KEEP, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 135: break;
          case 54: 
            { /*IGNORAR*/
            } 
            // fall through
          case 136: break;
          case 55: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.SALIR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 137: break;
          case 56: 
            { pintar.pintaAzul(yychar,yylength());  return symbol(sym.SDOBLE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 138: break;
          case 57: 
            { pintar.pintaAzul(yychar,yylength());  return symbol(sym.PISTA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 139: break;
          case 58: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.PARES, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 140: break;
          case 59: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.BOOLF, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 141: break;
          case 60: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.HACER, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 142: break;
          case 61: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.SWITCH, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 143: break;
          case 62: 
            { pintar.pintaAzul(yychar,yylength());  return symbol(sym.SENTERO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 144: break;
          case 63: 
            { pintar.pintaAzul(yychar,yylength());  return symbol(sym.SCADENA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 145: break;
          case 64: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.PRIMOS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 146: break;
          case 65: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.IMPARES, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 147: break;
          case 66: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.MENSAJE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 148: break;
          case 67: 
            { pintar.pintaAzul(yychar,yylength());  return symbol(sym.SBOOLEAN, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 149: break;
          case 68: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.ORDENAR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 150: break;
          case 69: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.ESPERAR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 151: break;
          case 70: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.RETORNA, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 152: break;
          case 71: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.DEFAULT, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 153: break;
          case 72: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.ARREGLO, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 154: break;
          case 73: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.MIENTRAS, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 155: break;
          case 74: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.LONGITUD, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 156: break;
          case 75: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.EXTIENDE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 157: break;
          case 76: 
            { pintar.pintaAzul(yychar,yylength());  return symbol(sym.SCARACTER, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 158: break;
          case 77: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.SUMARIZAR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 159: break;
          case 78: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.CONTINUAR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 160: break;
          case 79: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.PRINCIPAL, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 161: break;
          case 80: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.REPRODUCIR, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 162: break;
          case 81: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.ASCENDENTE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 163: break;
          case 82: 
            { pintar.pintaAzul(yychar,yylength()); return symbol(sym.DESCENDENTE, yytext(), yyline, yycolumn);
            } 
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
