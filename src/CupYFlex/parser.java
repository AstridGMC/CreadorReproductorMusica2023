
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package CupYFlex;

import Backend.Funciones.LlamadaFuncion;
import Backend.Compilador.Simbolo;
import Backend.Expresiones.*;
import Backend.Interfaces.Expresion;
import Backend.Funciones.Parametro;
import Backend.Reproductor.Nota;
import Backend.Funciones.Nativas.Longitud;
import Backend.Funciones.Nativas.Sumarizar;
import Backend.Funciones.Nativas.Ordenar;
import Backend.Funciones.Nativas.Esperar;
import Backend.Funciones.Reproducir;
import Backend.Interfaces.Instruccion;
import Backend.Instrucciones.*;
import Backend.Instrucciones.IfElse.*;
import java.util.LinkedList;
import java_cup.runtime.*;
import CupYFlex.ErrorS;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\044\003\000\002\044" +
    "\004\000\002\044\002\000\002\065\002\000\002\045\014" +
    "\000\002\066\002\000\002\045\012\000\002\045\007\000" +
    "\002\045\007\000\002\022\005\000\002\022\003\000\002" +
    "\027\003\000\002\027\002\000\002\030\004\000\002\030" +
    "\003\000\002\051\003\000\002\051\004\000\002\050\005" +
    "\000\002\050\003\000\002\026\006\000\002\026\005\000" +
    "\002\024\005\000\002\024\003\000\002\047\007\000\002" +
    "\025\006\000\002\025\005\000\002\057\004\000\002\057" +
    "\003\000\002\057\004\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\052\004\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\052\007\000\002" +
    "\052\004\000\002\052\004\000\002\031\004\000\002\031" +
    "\003\000\002\063\005\000\002\063\006\000\002\063\004" +
    "\000\002\063\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\003\000\002\021\005\000\002\021\003\000\002" +
    "\064\005\000\002\064\005\000\002\064\006\000\002\046" +
    "\011\000\002\046\015\000\002\046\013\000\002\013\003" +
    "\000\002\014\003\000\002\015\004\000\002\015\003\000" +
    "\002\053\010\000\002\053\012\000\002\053\011\000\002" +
    "\053\011\000\002\033\004\000\002\033\003\000\002\037" +
    "\006\000\002\037\005\000\002\036\005\000\002\036\004" +
    "\000\002\054\015\000\002\054\014\000\002\002\003\000" +
    "\002\002\003\000\002\020\006\000\002\020\005\000\002" +
    "\020\007\000\002\055\011\000\002\055\010\000\002\056" +
    "\012\000\002\056\011\000\002\060\012\000\002\060\011" +
    "\000\002\060\011\000\002\060\010\000\002\060\010\000" +
    "\002\032\003\000\002\032\002\000\002\061\014\000\002" +
    "\061\010\000\002\061\010\000\002\061\006\000\002\061" +
    "\006\000\002\061\004\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\012\003\000\002\012\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\034\005\000\002\034\003" +
    "\000\002\034\005\000\002\034\003\000\002\004\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\004\000\002" +
    "\040\003\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\006\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\006\000\002\041\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\023\005\000\002\023\004" +
    "\000\002\016\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\010\002\ufffe\003\005\013\011\001\002\000" +
    "\016\002\uff5f\003\uff5f\013\uff5f\052\uff5f\055\uff5f\113\uff5f" +
    "\001\002\000\016\002\uff5e\003\uff5e\013\uff5e\052\uff5e\055" +
    "\uff5e\113\uff5e\001\002\000\004\002\u016f\001\002\000\004" +
    "\002\000\001\002\000\010\002\ufffe\003\005\013\011\001" +
    "\002\000\006\003\005\060\012\001\002\000\010\012\u015b" +
    "\053\u015c\055\u015a\001\002\000\004\055\014\001\002\000" +
    "\030\005\035\006\024\007\034\010\031\011\017\016\015" +
    "\017\036\031\032\032\023\056\ufff4\060\026\001\002\000" +
    "\022\005\035\006\024\007\034\010\031\011\017\017\u0109" +
    "\032\023\060\026\001\002\000\004\056\u0157\001\002\000" +
    "\006\020\uffdf\060\uffdf\001\002\000\010\052\uffc4\103\u0154" +
    "\112\uffc4\001\002\000\030\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\016\ufff2\017\ufff2\031\ufff2\032\ufff2\056\ufff2" +
    "\060\ufff2\001\002\000\004\060\u0153\001\002\000\004\051" +
    "\u014e\001\002\000\006\020\uffe2\060\uffe2\001\002\000\030" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\016\uffe5\017" +
    "\uffe5\031\uffe5\032\uffe5\056\uffe5\060\uffe5\001\002\000\004" +
    "\051\u0144\001\002\000\030\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\016\ufff1\017\ufff1\031\ufff1\032\ufff1\056\ufff1" +
    "\060\ufff1\001\002\000\004\112\u0143\001\002\000\006\020" +
    "\uffe0\060\uffe0\001\002\000\020\005\035\006\024\007\034" +
    "\010\031\011\017\032\023\060\026\001\002\000\030\005" +
    "\035\006\024\007\034\010\031\011\017\016\015\017\036" +
    "\031\032\032\023\056\ufff5\060\026\001\002\000\006\020" +
    "\uffe1\060\uffe1\001\002\000\006\020\uffe3\060\uffe3\001\002" +
    "\000\014\005\035\006\024\007\034\010\031\011\017\001" +
    "\002\000\004\060\041\001\002\000\012\052\uffca\103\uffca" +
    "\112\uffca\113\042\001\002\000\014\052\uffc2\053\uffc2\103" +
    "\uffc2\112\uffc2\113\uffc2\001\002\000\004\060\043\001\002" +
    "\000\014\052\uffc3\053\uffc3\103\uffc3\112\uffc3\113\uffc3\001" +
    "\002\000\030\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\016\ufff3\017\ufff3\031\ufff3\032\ufff3\056\ufff3\060\ufff3\001" +
    "\002\000\004\060\047\001\002\000\030\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\016\uffe4\017\uffe4\031\uffe4\032" +
    "\uffe4\056\uffe4\060\uffe4\001\002\000\004\051\050\001\002" +
    "\000\020\003\005\005\035\006\024\007\034\010\031\011" +
    "\017\052\051\001\002\000\004\055\u0140\001\002\000\004" +
    "\060\u013f\001\002\000\006\052\uff85\113\u013d\001\002\000" +
    "\006\052\uff87\113\u013b\001\002\000\004\052\056\001\002" +
    "\000\004\055\057\001\002\000\106\003\110\005\035\006" +
    "\024\007\034\010\031\011\017\014\122\015\112\016\102" +
    "\017\137\021\120\024\105\025\131\026\075\027\126\030" +
    "\076\033\107\034\130\035\063\036\124\037\123\040\064" +
    "\046\116\047\101\051\127\056\uff9c\057\113\060\072\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\004\112\u013a\001\002\000\112\003\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\046\uffd3\047\uffd3\051\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\071\uffd3\102\uffd3" +
    "\111\uffd3\001\002\000\064\004\uff64\052\uff64\054\uff64\056" +
    "\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072\uff64" +
    "\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64\101" +
    "\uff64\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\110\uff64" +
    "\112\uff64\113\uff64\001\002\000\004\051\u0130\001\002\000" +
    "\004\051\u012c\001\002\000\004\112\u012b\001\002\000\064" +
    "\004\uff66\052\uff66\054\uff66\056\uff66\065\uff66\066\uff66\067" +
    "\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\075\uff66" +
    "\076\uff66\077\uff66\100\uff66\101\uff66\103\uff66\104\uff66\105" +
    "\uff66\106\uff66\107\uff66\110\uff66\112\uff66\113\uff66\001\002" +
    "\000\004\056\u012a\001\002\000\112\003\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\046\uffd7\047\uffd7\051\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\071\uffd7\102\uffd7" +
    "\111\uffd7\001\002\000\112\003\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\046\uffd5\047\uffd5\051\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\071\uffd5\102\uffd5\111\uffd5" +
    "\001\002\000\060\051\153\053\145\064\152\065\uff80\066" +
    "\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80" +
    "\075\uff80\076\uff80\077\uff80\100\uff80\101\uff80\103\u0123\104" +
    "\uff80\105\uff80\106\uff80\107\uff80\110\uff80\112\uff80\001\002" +
    "\000\030\014\122\015\112\051\127\057\113\060\151\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\064\004\uff82\052\uff82\054\uff82\056\uff82\065\uff82\066" +
    "\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82\103\uff82\104" +
    "\uff82\105\uff82\106\uff82\107\uff82\110\uff82\112\uff82\113\uff82" +
    "\001\002\000\004\051\u011b\001\002\000\004\112\uffbb\001" +
    "\002\000\030\014\122\015\112\051\127\057\113\060\151" +
    "\061\106\062\066\063\062\071\114\102\077\111\073\001" +
    "\002\000\004\112\u0119\001\002\000\004\051\u010e\001\002" +
    "\000\016\005\035\006\024\007\034\010\031\011\017\017" +
    "\u0109\001\002\000\006\103\376\112\uffee\001\002\000\112" +
    "\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\046\uffcb\047\uffcb" +
    "\051\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\071\uffcb\102\uffcb\111\uffcb\001\002\000\004\112\uffba" +
    "\001\002\000\064\004\uff67\052\uff67\054\uff67\056\uff67\065" +
    "\uff67\066\uff67\067\uff67\070\uff67\071\uff67\072\uff67\073\uff67" +
    "\074\uff67\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67\103" +
    "\uff67\104\uff67\105\uff67\106\uff67\107\uff67\110\uff67\112\uff67" +
    "\113\uff67\001\002\000\004\051\364\001\002\000\106\003" +
    "\110\005\035\006\024\007\034\010\031\011\017\014\122" +
    "\015\112\016\102\017\137\021\120\024\105\025\131\026" +
    "\075\027\126\030\076\033\107\034\130\035\063\036\124" +
    "\037\123\040\064\046\116\047\101\051\127\057\113\060" +
    "\072\061\106\062\066\063\062\071\114\102\077\111\073" +
    "\112\362\001\002\000\004\112\361\001\002\000\064\004" +
    "\uff62\052\uff62\054\uff62\056\uff62\065\uff62\066\uff62\067\uff62" +
    "\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62\076" +
    "\uff62\077\uff62\100\uff62\101\uff62\103\uff62\104\uff62\105\uff62" +
    "\106\uff62\107\uff62\110\uff62\112\uff62\113\uff62\001\002\000" +
    "\064\004\uff65\052\uff65\054\uff65\056\uff65\065\uff65\066\uff65" +
    "\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074\uff65\075" +
    "\uff65\076\uff65\077\uff65\100\uff65\101\uff65\103\uff65\104\uff65" +
    "\105\uff65\106\uff65\107\uff65\110\uff65\112\uff65\113\uff65\001" +
    "\002\000\030\014\122\015\112\051\127\057\113\060\151" +
    "\061\106\062\066\063\062\071\114\102\077\111\073\001" +
    "\002\000\054\052\uffdc\065\356\066\357\067\201\070\173" +
    "\071\160\072\174\073\170\074\171\075\175\076\172\077" +
    "\162\100\177\101\166\103\165\104\161\105\176\106\164" +
    "\107\167\110\200\112\uffdc\001\002\000\032\014\122\015" +
    "\112\051\127\057\113\060\151\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\112\uffb8\001\002\000\112\003" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\046\uffd4\047\uffd4\051" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\071\uffd4\102\uffd4\111\uffd4\001\002\000\004\051\331\001" +
    "\002\000\004\112\330\001\002\000\064\004\uff63\052\uff63" +
    "\054\uff63\056\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63" +
    "\100\uff63\101\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107" +
    "\uff63\110\uff63\112\uff63\113\uff63\001\002\000\004\051\322" +
    "\001\002\000\004\051\315\001\002\000\064\004\uff83\052" +
    "\uff83\054\uff83\056\uff83\065\uff83\066\uff83\067\uff83\070\uff83" +
    "\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\100\uff83\101\uff83\103\uff83\104\uff83\105\uff83\106\uff83" +
    "\107\uff83\110\uff83\112\uff83\113\uff83\001\002\000\004\055" +
    "\301\001\002\000\030\014\122\015\112\051\127\057\113" +
    "\060\151\061\106\062\066\063\062\071\114\102\077\111" +
    "\073\001\002\000\004\051\270\001\002\000\004\051\237" +
    "\001\002\000\112\003\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\046\uffd6\047\uffd6\051\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\071\uffd6\102\uffd6\111\uffd6\001\002" +
    "\000\004\112\236\001\002\000\106\003\110\005\035\006" +
    "\024\007\034\010\031\011\017\014\122\015\112\016\102" +
    "\017\137\021\120\024\105\025\131\026\075\027\126\030" +
    "\076\033\107\034\130\035\063\036\124\037\123\040\064" +
    "\046\116\047\101\051\127\056\uff9d\057\113\060\072\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\004\112\234\001\002\000\004\060\041\001\002\000" +
    "\014\005\035\006\024\007\034\010\031\011\017\001\002" +
    "\000\004\112\141\001\002\000\112\003\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\046\uffdb\047\uffdb\051\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\071\uffdb\102\uffdb" +
    "\111\uffdb\001\002\000\006\020\143\060\041\001\002\000" +
    "\004\060\041\001\002\000\006\053\145\113\042\001\002" +
    "\000\030\014\122\015\112\051\127\057\113\060\151\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\010\053\147\103\uffe9\112\uffe9\001\002\000\030\014" +
    "\122\015\112\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\046\054" +
    "\230\067\201\070\173\071\160\072\174\073\170\074\171" +
    "\075\175\076\172\077\162\100\177\101\166\103\165\104" +
    "\161\105\176\106\164\107\167\110\200\001\002\000\072" +
    "\004\uff80\051\153\052\uff80\053\145\054\uff80\056\uff80\064" +
    "\152\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\110\uff80" +
    "\112\uff80\113\uff80\001\002\000\030\014\122\015\112\051" +
    "\127\057\113\060\151\061\106\062\066\063\062\071\114" +
    "\102\077\111\073\001\002\000\032\014\122\015\112\051" +
    "\127\052\155\057\113\060\151\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\066\004\uff81\052" +
    "\uff81\053\147\054\uff81\056\uff81\065\uff81\066\uff81\067\uff81" +
    "\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076" +
    "\uff81\077\uff81\100\uff81\101\uff81\103\uff81\104\uff81\105\uff81" +
    "\106\uff81\107\uff81\110\uff81\112\uff81\113\uff81\001\002\000" +
    "\064\004\uff68\052\uff68\054\uff68\056\uff68\065\uff68\066\uff68" +
    "\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68\075" +
    "\uff68\076\uff68\077\uff68\100\uff68\101\uff68\103\uff68\104\uff68" +
    "\105\uff68\106\uff68\107\uff68\110\uff68\112\uff68\113\uff68\001" +
    "\002\000\006\052\225\113\224\001\002\000\046\067\201" +
    "\070\173\071\160\072\174\073\170\074\171\075\175\076" +
    "\172\077\162\100\177\101\166\103\165\104\161\105\176" +
    "\106\164\107\167\110\200\112\163\001\002\000\030\014" +
    "\122\015\112\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\030\014" +
    "\122\015\112\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\030\014" +
    "\122\015\112\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\006\052" +
    "\uff60\113\uff60\001\002\000\030\014\122\015\112\051\127" +
    "\057\113\060\151\061\106\062\066\063\062\071\114\102" +
    "\077\111\073\001\002\000\004\103\216\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\064" +
    "\004\uff7c\052\uff7c\054\uff7c\056\uff7c\065\uff7c\066\uff7c\067" +
    "\uff7c\070\173\071\uff7c\072\174\073\170\074\171\075\uff7c" +
    "\076\uff7c\077\uff7c\100\uff7c\101\uff7c\103\uff7c\104\uff7c\105" +
    "\uff7c\106\uff7c\107\uff7c\110\uff7c\112\uff7c\113\uff7c\001\002" +
    "\000\064\004\uff6c\052\uff6c\054\uff6c\056\uff6c\065\uff6c\066" +
    "\uff6c\067\201\070\173\071\160\072\174\073\170\074\171" +
    "\075\175\076\172\077\162\100\177\101\166\103\165\104" +
    "\161\105\176\106\uff6c\107\uff6c\110\uff6c\112\uff6c\113\uff6c" +
    "\001\002\000\064\004\uff74\052\uff74\054\uff74\056\uff74\065" +
    "\uff74\066\uff74\067\201\070\173\071\160\072\174\073\170" +
    "\074\171\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\103" +
    "\uff74\104\uff74\105\uff74\106\uff74\107\uff74\110\uff74\112\uff74" +
    "\113\uff74\001\002\000\064\004\uff6f\052\uff6f\054\uff6f\056" +
    "\uff6f\065\uff6f\066\uff6f\067\201\070\173\071\160\072\174" +
    "\073\170\074\171\075\175\076\172\077\162\100\177\101" +
    "\166\103\165\104\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f" +
    "\112\uff6f\113\uff6f\001\002\000\064\004\uff71\052\uff71\054" +
    "\uff71\056\uff71\065\uff71\066\uff71\067\201\070\173\071\160" +
    "\072\174\073\170\074\171\075\uff71\076\172\077\162\100" +
    "\177\101\166\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71" +
    "\110\uff71\112\uff71\113\uff71\001\002\000\064\004\uff79\052" +
    "\uff79\054\uff79\056\uff79\065\uff79\066\uff79\067\uff79\070\uff79" +
    "\071\uff79\072\uff79\073\uff79\074\171\075\uff79\076\uff79\077" +
    "\uff79\100\uff79\101\uff79\103\uff79\104\uff79\105\uff79\106\uff79" +
    "\107\uff79\110\uff79\112\uff79\113\uff79\001\002\000\064\004" +
    "\uff7a\052\uff7a\054\uff7a\056\uff7a\065\uff7a\066\uff7a\067\uff7a" +
    "\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\171\075\uff7a\076" +
    "\uff7a\077\uff7a\100\uff7a\101\uff7a\103\uff7a\104\uff7a\105\uff7a" +
    "\106\uff7a\107\uff7a\110\uff7a\112\uff7a\113\uff7a\001\002\000" +
    "\064\004\uff76\052\uff76\054\uff76\056\uff76\065\uff76\066\uff76" +
    "\067\201\070\173\071\160\072\174\073\170\074\171\075" +
    "\uff76\076\uff76\077\uff76\100\uff76\101\uff76\103\uff76\104\uff76" +
    "\105\uff76\106\uff76\107\uff76\110\uff76\112\uff76\113\uff76\001" +
    "\002\000\064\004\uff78\052\uff78\054\uff78\056\uff78\065\uff78" +
    "\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074" +
    "\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78\103\uff78" +
    "\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\112\uff78\113" +
    "\uff78\001\002\000\064\004\uff77\052\uff77\054\uff77\056\uff77" +
    "\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073" +
    "\uff77\074\171\075\uff77\076\uff77\077\uff77\100\uff77\101\uff77" +
    "\103\uff77\104\uff77\105\uff77\106\uff77\107\uff77\110\uff77\112" +
    "\uff77\113\uff77\001\002\000\064\004\uff6d\052\uff6d\054\uff6d" +
    "\056\uff6d\065\uff6d\066\uff6d\067\201\070\173\071\160\072" +
    "\174\073\170\074\171\075\175\076\172\077\162\100\177" +
    "\101\166\103\165\104\161\105\176\106\uff6d\107\uff6d\110" +
    "\uff6d\112\uff6d\113\uff6d\001\002\000\064\004\uff73\052\uff73" +
    "\054\uff73\056\uff73\065\uff73\066\uff73\067\201\070\173\071" +
    "\160\072\174\073\170\074\171\075\uff73\076\uff73\077\uff73" +
    "\100\uff73\101\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107" +
    "\uff73\110\uff73\112\uff73\113\uff73\001\002\000\030\014\122" +
    "\015\112\051\127\057\113\060\151\061\106\062\066\063" +
    "\062\071\114\102\077\111\073\001\002\000\064\004\uff72" +
    "\052\uff72\054\uff72\056\uff72\065\uff72\066\uff72\067\201\070" +
    "\173\071\160\072\174\073\170\074\171\075\uff72\076\172" +
    "\077\162\100\177\101\166\103\uff72\104\uff72\105\uff72\106" +
    "\uff72\107\uff72\110\uff72\112\uff72\113\uff72\001\002\000\064" +
    "\004\uff6e\052\uff6e\054\uff6e\056\uff6e\065\uff6e\066\uff6e\067" +
    "\201\070\173\071\160\072\174\073\170\074\171\075\175" +
    "\076\172\077\162\100\177\101\166\103\165\104\161\105" +
    "\176\106\uff6e\107\uff6e\110\uff6e\112\uff6e\113\uff6e\001\002" +
    "\000\064\004\uff75\052\uff75\054\uff75\056\uff75\065\uff75\066" +
    "\uff75\067\201\070\173\071\160\072\174\073\170\074\171" +
    "\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75\103\uff75\104" +
    "\uff75\105\uff75\106\uff75\107\uff75\110\uff75\112\uff75\113\uff75" +
    "\001\002\000\064\004\uff70\052\uff70\054\uff70\056\uff70\065" +
    "\uff70\066\uff70\067\201\070\173\071\160\072\174\073\170" +
    "\074\171\075\175\076\172\077\162\100\177\101\166\103" +
    "\165\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\112\uff70" +
    "\113\uff70\001\002\000\064\004\uff7b\052\uff7b\054\uff7b\056" +
    "\uff7b\065\uff7b\066\uff7b\067\uff7b\070\173\071\uff7b\072\174" +
    "\073\170\074\171\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101" +
    "\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b" +
    "\112\uff7b\113\uff7b\001\002\000\030\014\122\015\112\051" +
    "\127\057\113\060\151\061\106\062\066\063\062\071\114" +
    "\102\077\111\073\001\002\000\064\004\uff69\052\uff69\054" +
    "\uff69\056\uff69\065\uff69\066\uff69\067\uff69\070\uff69\071\uff69" +
    "\072\uff69\073\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100" +
    "\uff69\101\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107\uff69" +
    "\110\uff69\112\uff69\113\uff69\001\002\000\050\052\uff61\067" +
    "\201\070\173\071\160\072\174\073\170\074\171\075\175" +
    "\076\172\077\162\100\177\101\166\103\165\104\161\105" +
    "\176\106\164\107\167\110\200\113\uff61\001\002\000\064" +
    "\004\uff6a\052\uff6a\054\uff6a\056\uff6a\065\uff6a\066\uff6a\067" +
    "\201\070\173\071\160\072\174\073\170\074\171\075\175" +
    "\076\172\077\162\100\177\101\166\103\165\104\161\105" +
    "\176\106\164\107\167\110\200\112\uff6a\113\uff6a\001\002" +
    "\000\066\004\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\103" +
    "\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8\112\uffe8" +
    "\113\uffe8\001\002\000\046\054\232\067\201\070\173\071" +
    "\160\072\174\073\170\074\171\075\175\076\172\077\162" +
    "\100\177\101\166\103\165\104\161\105\176\106\164\107" +
    "\167\110\200\001\002\000\066\004\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\056\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107" +
    "\uffe7\110\uffe7\112\uffe7\113\uffe7\001\002\000\012\052\uffc8" +
    "\103\uffc8\112\uffc8\113\042\001\002\000\112\003\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\046\uffda\047\uffda\051\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\071\uffda" +
    "\102\uffda\111\uffda\001\002\000\112\003\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\046\uffcc\047\uffcc\051\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\071\uffcc\102\uffcc" +
    "\111\uffcc\001\002\000\112\003\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\046\uffce\047\uffce\051\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\071\uffce\102\uffce\111\uffce" +
    "\001\002\000\020\005\035\006\024\007\034\010\031\011" +
    "\017\017\242\060\243\001\002\000\004\112\255\001\002" +
    "\000\004\060\252\001\002\000\014\005\035\006\024\007" +
    "\034\010\031\011\017\001\002\000\004\103\244\001\002" +
    "\000\030\014\122\015\112\051\127\057\113\060\151\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\046\067\201\070\173\071\160\072\174\073\170\074" +
    "\171\075\175\076\172\077\162\100\177\101\166\103\165" +
    "\104\161\105\176\106\164\107\167\110\200\112\uffa8\001" +
    "\002\000\004\060\247\001\002\000\004\103\250\001\002" +
    "\000\030\014\122\015\112\051\127\057\113\060\151\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\046\067\201\070\173\071\160\072\174\073\170\074" +
    "\171\075\175\076\172\077\162\100\177\101\166\103\165" +
    "\104\161\105\176\106\164\107\167\110\200\112\uffa7\001" +
    "\002\000\004\103\253\001\002\000\030\014\122\015\112" +
    "\051\127\057\113\060\151\061\106\062\066\063\062\071" +
    "\114\102\077\111\073\001\002\000\046\067\201\070\173" +
    "\071\160\072\174\073\170\074\171\075\175\076\172\077" +
    "\162\100\177\101\166\103\165\104\161\105\176\106\164" +
    "\107\167\110\200\112\uffa9\001\002\000\030\014\122\015" +
    "\112\051\127\057\113\060\151\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\046\067\201\070" +
    "\173\071\160\072\174\073\170\074\171\075\175\076\172" +
    "\077\162\100\177\101\166\103\165\104\161\105\176\106" +
    "\164\107\167\110\200\112\257\001\002\000\046\005\035" +
    "\006\024\007\034\010\031\011\017\014\122\015\112\016" +
    "\102\017\036\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\004\052" +
    "\uffaa\001\002\000\004\052\263\001\002\000\004\052\uffab" +
    "\001\002\000\004\055\264\001\002\000\106\003\110\005" +
    "\035\006\024\007\034\010\031\011\017\014\122\015\112" +
    "\016\102\017\137\021\120\024\105\025\131\026\075\027" +
    "\126\030\076\033\107\034\130\035\063\036\124\037\123" +
    "\040\064\046\116\047\101\051\127\056\265\057\113\060" +
    "\072\061\106\062\066\063\062\071\114\102\077\111\073" +
    "\001\002\000\112\003\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\046\uffac\047\uffac\051\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\062\uffac\063\uffac\071\uffac\102\uffac\111\uffac\001\002" +
    "\000\106\003\110\005\035\006\024\007\034\010\031\011" +
    "\017\014\122\015\112\016\102\017\137\021\120\024\105" +
    "\025\131\026\075\027\126\030\076\033\107\034\130\035" +
    "\063\036\124\037\123\040\064\046\116\047\101\051\127" +
    "\056\267\057\113\060\072\061\106\062\066\063\062\071" +
    "\114\102\077\111\073\001\002\000\112\003\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\046\uffad\047\uffad\051\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\071\uffad\102" +
    "\uffad\111\uffad\001\002\000\006\061\272\062\273\001\002" +
    "\000\004\113\274\001\002\000\006\052\uff8a\113\uff8a\001" +
    "\002\000\006\052\uff8b\113\uff8b\001\002\000\006\061\272" +
    "\062\273\001\002\000\004\052\276\001\002\000\006\052" +
    "\uff9a\112\uff9a\001\002\000\046\052\300\067\201\070\173" +
    "\071\160\072\174\073\170\074\171\075\175\076\172\077" +
    "\162\100\177\101\166\103\165\104\161\105\176\106\164" +
    "\107\167\110\200\001\002\000\064\004\uff6b\052\uff6b\054" +
    "\uff6b\056\uff6b\065\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b" +
    "\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100" +
    "\uff6b\101\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b" +
    "\110\uff6b\112\uff6b\113\uff6b\001\002\000\106\003\110\005" +
    "\035\006\024\007\034\010\031\011\017\014\122\015\112" +
    "\016\102\017\137\021\120\024\105\025\131\026\075\027" +
    "\126\030\076\033\107\034\130\035\063\036\124\037\123" +
    "\040\064\046\116\047\101\051\127\056\302\057\113\060" +
    "\072\061\106\062\066\063\062\071\114\102\077\111\073" +
    "\001\002\000\004\026\311\001\002\000\106\003\110\005" +
    "\035\006\024\007\034\010\031\011\017\014\122\015\112" +
    "\016\102\017\137\021\120\024\105\025\131\026\075\027" +
    "\126\030\076\033\107\034\130\035\063\036\124\037\123" +
    "\040\064\046\116\047\101\051\127\056\304\057\113\060" +
    "\072\061\106\062\066\063\062\071\114\102\077\111\073" +
    "\001\002\000\004\026\305\001\002\000\004\051\306\001" +
    "\002\000\030\014\122\015\112\051\127\057\113\060\151" +
    "\061\106\062\066\063\062\071\114\102\077\111\073\001" +
    "\002\000\046\052\310\067\201\070\173\071\160\072\174" +
    "\073\170\074\171\075\175\076\172\077\162\100\177\101" +
    "\166\103\165\104\161\105\176\106\164\107\167\110\200" +
    "\001\002\000\112\003\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\046\uffa4\047\uffa4\051\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\071\uffa4\102\uffa4\111\uffa4\001\002" +
    "\000\004\051\312\001\002\000\030\014\122\015\112\051" +
    "\127\057\113\060\151\061\106\062\066\063\062\071\114" +
    "\102\077\111\073\001\002\000\046\052\314\067\201\070" +
    "\173\071\160\072\174\073\170\074\171\075\175\076\172" +
    "\077\162\100\177\101\166\103\165\104\161\105\176\106" +
    "\164\107\167\110\200\001\002\000\112\003\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\046\uffa3\047\uffa3\051\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\071\uffa3\102" +
    "\uffa3\111\uffa3\001\002\000\004\060\317\001\002\000\004" +
    "\052\321\001\002\000\006\052\uff90\113\uff90\001\002\000" +
    "\006\052\uff8f\113\uff8f\001\002\000\006\052\uff98\112\uff98" +
    "\001\002\000\006\057\326\060\323\001\002\000\004\052" +
    "\uff8e\001\002\000\004\052\327\001\002\000\004\052\uff8c" +
    "\001\002\000\004\052\uff8d\001\002\000\006\052\uff97\112" +
    "\uff97\001\002\000\112\003\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\046\uffd1\047\uffd1\051\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\071\uffd1\102\uffd1\111\uffd1\001" +
    "\002\000\030\014\122\015\112\051\127\057\113\060\151" +
    "\061\106\062\066\063\062\071\114\102\077\111\073\001" +
    "\002\000\046\052\333\067\201\070\173\071\160\072\174" +
    "\073\170\074\171\075\175\076\172\077\162\100\177\101" +
    "\166\103\165\104\161\105\176\106\164\107\167\110\200" +
    "\001\002\000\004\055\334\001\002\000\010\022\335\023" +
    "\342\056\341\001\002\000\004\004\353\001\002\000\010" +
    "\022\335\023\342\056\350\001\002\000\004\056\346\001" +
    "\002\000\010\022\uffb2\023\uffb2\056\uffb2\001\002\000\112" +
    "\003\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\046\uffb7\047\uffb7" +
    "\051\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\071\uffb7\102\uffb7\111\uffb7\001\002\000\030\014\122" +
    "\015\112\051\127\057\113\060\151\061\106\062\066\063" +
    "\062\071\114\102\077\111\073\001\002\000\046\004\344" +
    "\067\201\070\173\071\160\072\174\073\170\074\171\075" +
    "\175\076\172\077\162\100\177\101\166\103\165\104\161" +
    "\105\176\106\164\107\167\110\200\001\002\000\112\003" +
    "\110\005\035\006\024\007\034\010\031\011\017\014\122" +
    "\015\112\016\102\017\137\021\120\022\uffb0\023\uffb0\024" +
    "\105\025\131\026\075\027\126\030\076\033\107\034\130" +
    "\035\063\036\124\037\123\040\064\046\116\047\101\051" +
    "\127\056\uffb0\057\113\060\072\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\112\003\110\005" +
    "\035\006\024\007\034\010\031\011\017\014\122\015\112" +
    "\016\102\017\137\021\120\022\uffb1\023\uffb1\024\105\025" +
    "\131\026\075\027\126\030\076\033\107\034\130\035\063" +
    "\036\124\037\123\040\064\046\116\047\101\051\127\056" +
    "\uffb1\057\113\060\072\061\106\062\066\063\062\071\114" +
    "\102\077\111\073\001\002\000\112\003\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\046\uffb4\047\uffb4\051\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\071\uffb4\102\uffb4" +
    "\111\uffb4\001\002\000\004\056\352\001\002\000\112\003" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\046\uffb5\047\uffb5\051" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\071\uffb5\102\uffb5\111\uffb5\001\002\000\010\022\uffb3\023" +
    "\uffb3\056\uffb3\001\002\000\112\003\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\046\uffb6\047\uffb6\051\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\071\uffb6\102\uffb6\111" +
    "\uffb6\001\002\000\106\003\110\005\035\006\024\007\034" +
    "\010\031\011\017\014\122\015\112\016\102\017\137\021" +
    "\120\024\105\025\131\026\075\027\126\030\076\033\107" +
    "\034\130\035\063\036\124\037\123\040\064\046\116\047" +
    "\101\051\127\056\uffae\057\113\060\072\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\106\003" +
    "\110\005\035\006\024\007\034\010\031\011\017\014\122" +
    "\015\112\016\102\017\137\021\120\024\105\025\131\026" +
    "\075\027\126\030\076\033\107\034\130\035\063\036\124" +
    "\037\123\040\064\046\116\047\101\051\127\056\uffaf\057" +
    "\113\060\072\061\106\062\066\063\062\071\114\102\077" +
    "\111\073\001\002\000\046\067\201\070\173\071\160\072" +
    "\174\073\170\074\171\075\175\076\172\077\162\100\177" +
    "\101\166\103\165\104\161\105\176\106\164\107\167\110" +
    "\200\112\uffb9\001\002\000\006\052\uffde\112\uffde\001\002" +
    "\000\006\052\uffdd\112\uffdd\001\002\000\064\004\uff7f\052" +
    "\uff7f\054\uff7f\056\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f" +
    "\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077" +
    "\uff7f\100\uff7f\101\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f" +
    "\107\uff7f\110\uff7f\112\uff7f\113\uff7f\001\002\000\112\003" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\046\uffd2\047\uffd2\051" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\071\uffd2\102\uffd2\111\uffd2\001\002\000\006\052\uff96\112" +
    "\uff96\001\002\000\112\003\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\071\uffcd\102\uffcd\111\uffcd\001" +
    "\002\000\004\060\365\001\002\000\004\113\uff89\001\002" +
    "\000\004\113\367\001\002\000\030\014\122\015\112\051" +
    "\127\057\113\060\151\061\106\062\066\063\062\071\114" +
    "\102\077\111\073\001\002\000\046\067\201\070\173\071" +
    "\160\072\174\073\170\074\171\075\175\076\172\077\162" +
    "\100\177\101\166\103\165\104\161\105\176\106\164\107" +
    "\167\110\200\113\371\001\002\000\030\014\122\015\112" +
    "\051\127\057\113\060\151\061\106\062\066\063\062\071" +
    "\114\102\077\111\073\001\002\000\046\067\201\070\173" +
    "\071\160\072\174\073\170\074\171\075\175\076\172\077" +
    "\162\100\177\101\166\103\165\104\161\105\176\106\164" +
    "\107\167\110\200\113\373\001\002\000\030\014\122\015" +
    "\112\051\127\057\113\060\151\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\046\052\375\067" +
    "\201\070\173\071\160\072\174\073\170\074\171\075\175" +
    "\076\172\077\162\100\177\101\166\103\165\104\161\105" +
    "\176\106\164\107\167\110\200\001\002\000\006\052\uff9b" +
    "\112\uff9b\001\002\000\004\055\377\001\002\000\030\014" +
    "\122\015\112\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\006\055" +
    "\u0101\112\uffef\001\002\000\030\014\122\015\112\051\127" +
    "\057\113\060\151\061\106\062\066\063\062\071\114\102" +
    "\077\111\073\001\002\000\006\056\u0105\113\u0104\001\002" +
    "\000\050\056\uffea\067\201\070\173\071\160\072\174\073" +
    "\170\074\171\075\175\076\172\077\162\100\177\101\166" +
    "\103\165\104\161\105\176\106\164\107\167\110\200\113" +
    "\uffea\001\002\000\030\014\122\015\112\051\127\057\113" +
    "\060\151\061\106\062\066\063\062\071\114\102\077\111" +
    "\073\001\002\000\006\055\uffed\112\uffed\001\002\000\050" +
    "\056\uffeb\067\201\070\173\071\160\072\174\073\170\074" +
    "\171\075\175\076\172\077\162\100\177\101\166\103\165" +
    "\104\161\105\176\106\164\107\167\110\200\113\uffeb\001" +
    "\002\000\006\056\u0108\113\u0104\001\002\000\006\055\uffec" +
    "\112\uffec\001\002\000\014\005\035\006\024\007\034\010" +
    "\031\011\017\001\002\000\004\060\041\001\002\000\012" +
    "\052\uffc7\103\uffc7\112\uffc7\113\042\001\002\000\004\060" +
    "\041\001\002\000\012\052\uffc9\103\uffc9\112\uffc9\113\042" +
    "\001\002\000\030\014\122\015\112\051\127\057\113\060" +
    "\151\061\106\062\066\063\062\071\114\102\077\111\073" +
    "\001\002\000\046\052\u0110\067\201\070\173\071\160\072" +
    "\174\073\170\074\171\075\175\076\172\077\162\100\177" +
    "\101\166\103\165\104\161\105\176\106\164\107\167\110" +
    "\200\001\002\000\004\055\u0111\001\002\000\104\003\110" +
    "\005\035\006\024\007\034\010\031\011\017\014\122\015" +
    "\112\016\102\017\137\021\120\024\105\025\131\026\075" +
    "\027\126\030\076\033\107\034\130\035\063\036\124\037" +
    "\123\040\064\046\116\047\101\051\127\057\113\060\072" +
    "\061\106\062\066\063\062\071\114\102\077\111\073\001" +
    "\002\000\106\003\110\005\035\006\024\007\034\010\031" +
    "\011\017\014\122\015\112\016\102\017\137\021\120\024" +
    "\105\025\131\026\075\027\126\030\076\033\107\034\130" +
    "\035\063\036\124\037\123\040\064\046\116\047\101\051" +
    "\127\056\u0113\057\113\060\072\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\114\003\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\046\uffbe\047\uffbe\050\u0114\051" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\071\uffbe\102\uffbe\111\uffbe\001\002\000\006\047\101\055" +
    "\u0115\001\002\000\104\003\110\005\035\006\024\007\034" +
    "\010\031\011\017\014\122\015\112\016\102\017\137\021" +
    "\120\024\105\025\131\026\075\027\126\030\076\033\107" +
    "\034\130\035\063\036\124\037\123\040\064\046\116\047" +
    "\101\051\127\057\113\060\072\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\112\003\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\046\uffbc\047\uffbc\051\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\071\uffbc" +
    "\102\uffbc\111\uffbc\001\002\000\106\003\110\005\035\006" +
    "\024\007\034\010\031\011\017\014\122\015\112\016\102" +
    "\017\137\021\120\024\105\025\131\026\075\027\126\030" +
    "\076\033\107\034\130\035\063\036\124\037\123\040\064" +
    "\046\116\047\101\051\127\056\u0118\057\113\060\072\061" +
    "\106\062\066\063\062\071\114\102\077\111\073\001\002" +
    "\000\112\003\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\046\uffbd" +
    "\047\uffbd\051\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\071\uffbd\102\uffbd\111\uffbd\001\002\000\112" +
    "\003\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\046\uffd0\047\uffd0" +
    "\051\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\071\uffd0\102\uffd0\111\uffd0\001\002\000\064\004\uff7d" +
    "\052\uff7d\054\uff7d\056\uff7d\065\uff7d\066\uff7d\067\uff7d\070" +
    "\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d" +
    "\077\uff7d\100\uff7d\101\uff7d\103\uff7d\104\uff7d\105\uff7d\106" +
    "\uff7d\107\uff7d\110\uff7d\112\uff7d\113\uff7d\001\002\000\030" +
    "\014\122\015\112\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\046" +
    "\052\u011d\067\201\070\173\071\160\072\174\073\170\074" +
    "\171\075\175\076\172\077\162\100\177\101\166\103\165" +
    "\104\161\105\176\106\164\107\167\110\200\001\002\000" +
    "\004\055\u011e\001\002\000\106\003\110\005\035\006\024" +
    "\007\034\010\031\011\017\014\122\015\112\016\102\017" +
    "\137\021\120\024\105\025\131\026\075\027\126\030\076" +
    "\033\107\034\130\035\063\036\124\037\123\040\064\046" +
    "\116\047\101\051\127\056\u011f\057\113\060\072\061\106" +
    "\062\066\063\062\071\114\102\077\111\073\001\002\000" +
    "\112\003\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\046\uffa5\047" +
    "\uffa5\051\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\071\uffa5\102\uffa5\111\uffa5\001\002\000\106\003" +
    "\110\005\035\006\024\007\034\010\031\011\017\014\122" +
    "\015\112\016\102\017\137\021\120\024\105\025\131\026" +
    "\075\027\126\030\076\033\107\034\130\035\063\036\124" +
    "\037\123\040\064\046\116\047\101\051\127\056\u0121\057" +
    "\113\060\072\061\106\062\066\063\062\071\114\102\077" +
    "\111\073\001\002\000\112\003\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\046\uffa6\047\uffa6\051\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\071\uffa6\102\uffa6\111\uffa6" +
    "\001\002\000\064\004\uff7e\052\uff7e\054\uff7e\056\uff7e\065" +
    "\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e" +
    "\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\103" +
    "\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\110\uff7e\112\uff7e" +
    "\113\uff7e\001\002\000\044\003\u0129\014\122\015\112\033" +
    "\107\034\130\035\063\036\124\037\123\051\127\057\113" +
    "\060\151\061\106\062\066\063\062\071\114\102\077\111" +
    "\073\001\002\000\054\053\147\065\uff81\066\uff81\067\uff81" +
    "\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076" +
    "\uff81\077\uff81\100\uff81\101\uff81\103\u0125\104\uff81\105\uff81" +
    "\106\uff81\107\uff81\110\uff81\112\uff81\001\002\000\030\014" +
    "\122\015\112\051\127\057\113\060\151\061\106\062\066" +
    "\063\062\071\114\102\077\111\073\001\002\000\046\067" +
    "\201\070\173\071\160\072\174\073\170\074\171\075\175" +
    "\076\172\077\162\100\177\101\166\103\165\104\161\105" +
    "\176\106\164\107\167\110\200\112\uffbf\001\002\000\046" +
    "\067\201\070\173\071\160\072\174\073\170\074\171\075" +
    "\175\076\172\077\162\100\177\101\166\103\165\104\161" +
    "\105\176\106\164\107\167\110\200\112\uffc1\001\002\000" +
    "\004\112\uffc0\001\002\000\004\112\362\001\002\000\030" +
    "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\016\uffa2\017" +
    "\uffa2\031\uffa2\032\uffa2\056\uffa2\060\uffa2\001\002\000\112" +
    "\003\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\071\uffd9\102\uffd9\111\uffd9\001\002\000\030\014\122" +
    "\015\112\051\127\057\113\060\151\061\106\062\066\063" +
    "\062\071\114\102\077\111\073\001\002\000\046\052\u012e" +
    "\067\201\070\173\071\160\072\174\073\170\074\171\075" +
    "\175\076\172\077\162\100\177\101\166\103\165\104\161" +
    "\105\176\106\164\107\167\110\200\001\002\000\004\112" +
    "\u012f\001\002\000\112\003\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\046\uffcf\047\uffcf\051\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\071\uffcf\102\uffcf\111\uffcf\001" +
    "\002\000\004\060\317\001\002\000\004\113\u0132\001\002" +
    "\000\014\041\u0134\042\u0137\043\u0133\044\u0138\045\u0135\001" +
    "\002\000\004\052\uff93\001\002\000\004\052\uff95\001\002" +
    "\000\004\052\uff91\001\002\000\004\052\u0139\001\002\000" +
    "\004\052\uff94\001\002\000\004\052\uff92\001\002\000\006" +
    "\052\uff99\112\uff99\001\002\000\112\003\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\046\uffd8\047\uffd8\051\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\071\uffd8\102\uffd8" +
    "\111\uffd8\001\002\000\016\003\005\005\035\006\024\007" +
    "\034\010\031\011\017\001\002\000\004\052\uff88\001\002" +
    "\000\016\003\005\005\035\006\024\007\034\010\031\011" +
    "\017\001\002\000\004\052\uff86\001\002\000\006\052\uff84" +
    "\113\uff84\001\002\000\106\003\110\005\035\006\024\007" +
    "\034\010\031\011\017\014\122\015\112\016\102\017\137" +
    "\021\120\024\105\025\131\026\075\027\126\030\076\033" +
    "\107\034\130\035\063\036\124\037\123\040\064\046\116" +
    "\047\101\051\127\056\uff9c\057\113\060\072\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\004" +
    "\056\u0142\001\002\000\030\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\016\uffa1\017\uffa1\031\uffa1\032\uffa1\056\uffa1" +
    "\060\uffa1\001\002\000\030\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\016\ufff0\017\ufff0\031\ufff0\032\ufff0\056\ufff0" +
    "\060\ufff0\001\002\000\020\003\005\005\035\006\024\007" +
    "\034\010\031\011\017\052\u0145\001\002\000\004\055\u014b" +
    "\001\002\000\004\052\u0147\001\002\000\004\055\u0148\001" +
    "\002\000\106\003\110\005\035\006\024\007\034\010\031" +
    "\011\017\014\122\015\112\016\102\017\137\021\120\024" +
    "\105\025\131\026\075\027\126\030\076\033\107\034\130" +
    "\035\063\036\124\037\123\040\064\046\116\047\101\051" +
    "\127\056\uff9c\057\113\060\072\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\004\056\u014a\001" +
    "\002\000\030\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\016\uffa0\017\uffa0\031\uffa0\032\uffa0\056\uffa0\060\uffa0\001" +
    "\002\000\106\003\110\005\035\006\024\007\034\010\031" +
    "\011\017\014\122\015\112\016\102\017\137\021\120\024" +
    "\105\025\131\026\075\027\126\030\076\033\107\034\130" +
    "\035\063\036\124\037\123\040\064\046\116\047\101\051" +
    "\127\056\uff9c\057\113\060\072\061\106\062\066\063\062" +
    "\071\114\102\077\111\073\001\002\000\004\056\u014d\001" +
    "\002\000\030\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\016\uff9f\017\uff9f\031\uff9f\032\uff9f\056\uff9f\060\uff9f\001" +
    "\002\000\004\052\u014f\001\002\000\004\055\u0150\001\002" +
    "\000\106\003\110\005\035\006\024\007\034\010\031\011" +
    "\017\014\122\015\112\016\102\017\137\021\120\024\105" +
    "\025\131\026\075\027\126\030\076\033\107\034\130\035" +
    "\063\036\124\037\123\040\064\046\116\047\101\051\127" +
    "\056\uff9c\057\113\060\072\061\106\062\066\063\062\071" +
    "\114\102\077\111\073\001\002\000\004\056\u0152\001\002" +
    "\000\030\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\016" +
    "\uff9e\017\uff9e\031\uff9e\032\uff9e\056\uff9e\060\uff9e\001\002" +
    "\000\012\051\050\103\uffc2\112\uffc2\113\uffc2\001\002\000" +
    "\044\003\u0129\014\122\015\112\033\107\034\130\035\063" +
    "\036\124\037\123\051\127\057\113\060\151\061\106\062" +
    "\066\063\062\071\114\102\077\111\073\001\002\000\050" +
    "\052\uffc6\067\201\070\173\071\160\072\174\073\170\074" +
    "\171\075\175\076\172\077\162\100\177\101\166\103\165" +
    "\104\161\105\176\106\164\107\167\110\200\112\uffc6\001" +
    "\002\000\006\052\uffc5\112\uffc5\001\002\000\004\002\ufff8" +
    "\001\002\000\004\060\u0153\001\002\000\030\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\016\uffe6\017\uffe6\031\uffe6" +
    "\032\uffe6\056\uffe6\060\uffe6\001\002\000\030\005\035\006" +
    "\024\007\034\010\031\011\017\016\015\017\036\031\032" +
    "\032\023\056\ufff4\060\026\001\002\000\004\060\u015e\001" +
    "\002\000\004\012\u015d\001\002\000\004\060\u015e\001\002" +
    "\000\010\054\ufff6\055\ufff6\113\ufff6\001\002\000\006\054" +
    "\u0161\113\u0160\001\002\000\004\060\u0166\001\002\000\004" +
    "\055\u0162\001\002\000\030\005\035\006\024\007\034\010" +
    "\031\011\017\016\015\017\036\031\032\032\023\056\ufff4" +
    "\060\026\001\002\000\004\056\ufffd\001\002\000\004\056" +
    "\u0165\001\002\000\004\002\ufffc\001\002\000\010\054\ufff7" +
    "\055\ufff7\113\ufff7\001\002\000\006\055\u0168\113\u0160\001" +
    "\002\000\030\005\035\006\024\007\034\010\031\011\017" +
    "\016\015\017\036\031\032\032\023\056\ufff4\060\026\001" +
    "\002\000\004\056\ufffb\001\002\000\004\056\u016b\001\002" +
    "\000\004\002\ufffa\001\002\000\004\056\u016d\001\002\000" +
    "\004\002\ufff9\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\012\007\003\016\007\044\005\045\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\003\016\007\044\u016d\045" +
    "\006\001\001\000\006\007\003\016\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\027\015\030\032\043" +
    "\021\051\020\057\026\060\024\062\027\063\017\001\001" +
    "\000\006\043\u0157\060\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\044\060\045\001" +
    "\001\000\016\043\021\051\043\057\026\060\024\062\027" +
    "\063\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\036\001\001\000\004\021\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\053\007\003\016\052\034" +
    "\054\043\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\005\073\013\110\014\120\015\077" +
    "\017\057\031\133\032\066\040\114\041\124\043\135\046" +
    "\067\047\102\050\137\052\103\053\131\054\070\055\116" +
    "\056\060\061\132\062\134\063\017\064\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\u0123\001\001\000\010\005\073\040\u0121\041" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\073\040\u0119\041\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\005\073\013\110" +
    "\014\120\015\077\017\057\040\114\041\124\043\135\046" +
    "\067\047\102\050\137\052\362\053\131\054\070\055\116" +
    "\056\060\061\132\062\134\063\017\064\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\073\040\357\041\124\001\001\000\002\001\001\000" +
    "\010\005\073\040\354\041\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\073\040\276\041\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\005\073\013\110\014\120\015\077\017" +
    "\057\040\114\041\124\043\135\046\067\047\102\050\137" +
    "\052\234\053\131\054\070\055\116\056\060\061\132\062" +
    "\134\063\017\064\064\001\001\000\002\001\001\000\004" +
    "\021\232\001\001\000\004\043\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\037\001\001\000\004" +
    "\021\143\001\001\000\004\025\145\001\001\000\010\005" +
    "\073\040\230\041\124\001\001\000\002\001\001\000\010" +
    "\005\073\040\147\041\124\001\001\000\002\001\001\000" +
    "\004\025\153\001\001\000\010\005\073\040\226\041\124" +
    "\001\001\000\012\005\073\023\155\040\156\041\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\073\040\222\041\124\001" +
    "\001\000\010\005\073\040\221\041\124\001\001\000\010" +
    "\005\073\040\220\041\124\001\001\000\002\001\001\000" +
    "\010\005\073\040\217\041\124\001\001\000\002\001\001" +
    "\000\010\005\073\040\214\041\124\001\001\000\010\005" +
    "\073\040\213\041\124\001\001\000\010\005\073\040\212" +
    "\041\124\001\001\000\010\005\073\040\211\041\124\001" +
    "\001\000\010\005\073\040\210\041\124\001\001\000\010" +
    "\005\073\040\207\041\124\001\001\000\010\005\073\040" +
    "\206\041\124\001\001\000\010\005\073\040\205\041\124" +
    "\001\001\000\010\005\073\040\204\041\124\001\001\000" +
    "\010\005\073\040\203\041\124\001\001\000\010\005\073" +
    "\040\202\041\124\001\001\000\010\005\073\040\201\041" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\073\040\216\041\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\073\040\225\041\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\237\043\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\245\001\001\000\002\001" +
    "\001\000\010\005\073\040\244\041\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\073\040\250\041\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\073\040\253\041\124\001\001\000" +
    "\002\001\001\000\010\005\073\040\255\041\124\001\001" +
    "\000\002\001\001\000\022\002\260\005\073\017\257\040" +
    "\114\041\124\043\135\062\261\063\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\005\073\013\110\014\120\015\077\017\057" +
    "\031\265\040\114\041\124\043\135\046\067\047\102\050" +
    "\137\052\103\053\131\054\070\055\116\056\060\061\132" +
    "\062\134\063\017\064\064\001\001\000\002\001\001\000" +
    "\052\005\073\013\110\014\120\015\077\017\057\040\114" +
    "\041\124\043\135\046\067\047\102\050\137\052\234\053" +
    "\131\054\070\055\116\056\060\061\132\062\134\063\017" +
    "\064\064\001\001\000\002\001\001\000\004\010\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\005\073" +
    "\013\110\014\120\015\077\017\057\031\302\040\114\041" +
    "\124\043\135\046\067\047\102\050\137\052\103\053\131" +
    "\054\070\055\116\056\060\061\132\062\134\063\017\064" +
    "\064\001\001\000\002\001\001\000\052\005\073\013\110" +
    "\014\120\015\077\017\057\040\114\041\124\043\135\046" +
    "\067\047\102\050\137\052\234\053\131\054\070\055\116" +
    "\056\060\061\132\062\134\063\017\064\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\073\040\306" +
    "\041\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\073\040\312\041\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\317\012" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\324\042\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\073\040\331\041\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\335\036\336\037\337\001" +
    "\001\000\002\001\001\000\006\036\346\037\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\073\040\342\041\124\001\001\000\002\001\001" +
    "\000\054\005\073\013\110\014\120\015\077\017\057\031" +
    "\344\040\114\041\124\043\135\046\067\047\102\050\137" +
    "\052\103\053\131\054\070\055\116\056\060\061\132\062" +
    "\134\063\017\064\064\001\001\000\052\005\073\013\110" +
    "\014\120\015\077\017\057\040\114\041\124\043\135\046" +
    "\067\047\102\050\137\052\234\053\131\054\070\055\116" +
    "\056\060\061\132\062\134\063\017\064\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\005\073\013\110\014" +
    "\120\015\077\017\057\031\353\040\114\041\124\043\135" +
    "\046\067\047\102\050\137\052\103\053\131\054\070\055" +
    "\116\056\060\061\132\062\134\063\017\064\064\001\001" +
    "\000\052\005\073\013\110\014\120\015\077\017\057\040" +
    "\114\041\124\043\135\046\067\047\102\050\137\052\234" +
    "\053\131\054\070\055\116\056\060\061\132\062\134\063" +
    "\017\064\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\073\040" +
    "\367\041\124\001\001\000\002\001\001\000\010\005\073" +
    "\040\371\041\124\001\001\000\002\001\001\000\010\005" +
    "\073\040\373\041\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\377\001\001\000\012\005\073\024" +
    "\u0106\040\u0102\041\124\001\001\000\002\001\001\000\012" +
    "\005\073\024\u0101\040\u0102\041\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\073\040\u0105\041\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u010b\001\001\000\004" +
    "\021\u010a\001\001\000\002\001\001\000\004\021\u010c\001" +
    "\001\000\002\001\001\000\010\005\073\040\u010e\041\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\005" +
    "\073\013\110\014\120\015\077\017\057\031\u0111\040\114" +
    "\041\124\043\135\046\067\047\102\050\137\052\103\053" +
    "\131\054\070\055\116\056\060\061\132\062\134\063\017" +
    "\064\064\001\001\000\052\005\073\013\110\014\120\015" +
    "\077\017\057\040\114\041\124\043\135\046\067\047\102" +
    "\050\137\052\234\053\131\054\070\055\116\056\060\061" +
    "\132\062\134\063\017\064\064\001\001\000\002\001\001" +
    "\000\004\046\u0115\001\001\000\054\005\073\013\110\014" +
    "\120\015\077\017\057\031\u0116\040\114\041\124\043\135" +
    "\046\067\047\102\050\137\052\103\053\131\054\070\055" +
    "\116\056\060\061\132\062\134\063\017\064\064\001\001" +
    "\000\002\001\001\000\052\005\073\013\110\014\120\015" +
    "\077\017\057\040\114\041\124\043\135\046\067\047\102" +
    "\050\137\052\234\053\131\054\070\055\116\056\060\061" +
    "\132\062\134\063\017\064\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\073\040" +
    "\u011b\041\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\005\073\013\110\014\120\015\077\017\057\031" +
    "\u011f\040\114\041\124\043\135\046\067\047\102\050\137" +
    "\052\103\053\131\054\070\055\116\056\060\061\132\062" +
    "\134\063\017\064\064\001\001\000\002\001\001\000\052" +
    "\005\073\013\110\014\120\015\077\017\057\040\114\041" +
    "\124\043\135\046\067\047\102\050\137\052\234\053\131" +
    "\054\070\055\116\056\060\061\132\062\134\063\017\064" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\073\040\u0126\041\124\061\u0127\001\001\000\002\001" +
    "\001\000\010\005\073\040\u0125\041\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\073" +
    "\040\u012c\041\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\317\012\u0130\001\001" +
    "\000\002\001\001\000\004\035\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\053\007\003\016\052\034\u013b" +
    "\043\051\001\001\000\002\001\001\000\014\004\053\007" +
    "\003\016\052\034\u013d\043\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\005\073\013\110\014\120\015" +
    "\077\017\057\031\133\032\u0140\040\114\041\124\043\135" +
    "\046\067\047\102\050\137\052\103\053\131\054\070\055" +
    "\116\056\060\061\132\062\134\063\017\064\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\053\007\003\016\052\034\u0145\043\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\005\073\013\110\014\120\015\077\017\057\031\133" +
    "\032\u0148\040\114\041\124\043\135\046\067\047\102\050" +
    "\137\052\103\053\131\054\070\055\116\056\060\061\132" +
    "\062\134\063\017\064\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\005\073\013\110\014\120\015\077" +
    "\017\057\031\133\032\u014b\040\114\041\124\043\135\046" +
    "\067\047\102\050\137\052\103\053\131\054\070\055\116" +
    "\056\060\061\132\062\134\063\017\064\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\073\013\110\014\120\015\077\017" +
    "\057\031\133\032\u0150\040\114\041\124\043\135\046\067" +
    "\047\102\050\137\052\103\053\131\054\070\055\116\056" +
    "\060\061\132\062\134\063\017\064\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\073\040\u0154\041\124\061\u0155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u010a\001" +
    "\001\000\002\001\001\000\022\027\u016b\030\032\043\021" +
    "\051\020\057\026\060\024\062\027\063\017\001\001\000" +
    "\004\022\u0166\001\001\000\002\001\001\000\004\022\u015e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\027\u0162\030\032\043\021" +
    "\051\020\057\026\060\024\062\027\063\017\001\001\000" +
    "\004\065\u0163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\027\u0168\030" +
    "\032\043\021\051\020\057\026\060\024\062\027\063\017" +
    "\001\001\000\004\066\u0169\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<String> avisos = new ArrayList();
    PistaInst instruccion;

    public PistaInst getInstruccion(){
            return instruccion;
        }

    public void syntax_error(Symbol s){
         if(s.value!= null){
            System.out.println(s  );
            String lexema = s.value.toString();
            int columna =  s.right;
            int fila = s.left;
            String red="\033[31m"; 
            System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
            avisos.add("ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo");
            ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
            ErrorS.tablaErrores.add(error);
        }else{
            String lexema = s.value.toString();
            int columna =  s.right;
            int fila = s.left;
                  String red="\033[31m"; 
                 System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + "}"+ "\t\tFila " + 0 +"\t\tColumna: " +0+"simbolo"  );
                  avisos.add("ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + "}"+ "\t\tFila " + 0 +"\t\tColumna: " +0+"simbolo");
                 ErrorS error = new ErrorS("}", 0, 0 , "error Sintactico");
                 ErrorS.tablaErrores.add(error);
        }
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErrores.add(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PistaInst start_val = (PistaInst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= pista 
            {
              PistaInst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PistaInst s = (PistaInst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.instruccion=s; RESULT= s;  System.out.println("s");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= ERRORSENTENCE S 
            {
              PistaInst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PistaInst s = (PistaInst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.instruccion=s; RESULT= s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= 
            {
              PistaInst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              PistaInst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT= new PistaInst(id.toString(),cPista, ext );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pista ::= PISTA IDENTIFICADOR CORCHETEIZ EXTIENDE extiende CORCHETEDER LLAVEABRE cuerpo NT$0 LLAVECIERRA 
            {
              PistaInst RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (PistaInst) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              PistaInst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
RESULT= new PistaInst(id.toString(),cPista, ext );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pista ::= PISTA IDENTIFICADOR EXTIENDE extiende LLAVEABRE cuerpo NT$1 LLAVECIERRA 
            {
              PistaInst RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (PistaInst) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pista ::= PISTA IDENTIFICADOR LLAVEABRE cuerpo LLAVECIERRA 
            {
              PistaInst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PistaInst(id.toString(),cPista, null );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pista ::= PISTA ERRORSENTENCE LLAVEABRE cuerpo LLAVECIERRA 
            {
              PistaInst RESULT =null;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new PistaInst(null,cPista, null );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extiende ::= extiende COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ext.add(id.toString());  
                                                   RESULT= ext;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extiende ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> ids = new ArrayList();
                                          ids.add(id.toString()); 
                                          RESULT = ids;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= cuerpoPista 
            {
              ArrayList<Instruccion> RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cuerpo = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= cuerpo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= 
            {
              ArrayList<Instruccion> RESULT =null;
		RESULT= null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpoPista ::= cuerpoPista cuerpPistaP 
            {
              ArrayList<Instruccion> RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> cuerpo = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerpoPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerpoPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion cuerpoP = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                    cuerpo.add(cuerpoP);
                                                                    RESULT= cuerpo;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPista",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpoPista ::= cuerpPistaP 
            {
              ArrayList<Instruccion> RESULT =null;
		int cuerpoPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerpoPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion cuerpoP = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Instruccion> sentencias = new ArrayList();
                                                                 sentencias.add(cuerpoP);   
                                                                RESULT = sentencias;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPista",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpPistaP ::= MetodoFuncioDec 
            {
              Instruccion RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("cuerpPistaP-MetodoFuncioDec"); RESULT= fun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpPistaP",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpPistaP ::= declaracionVar PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int decVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion decVar = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("cuerpPistaP-declaracionVar"); RESULT= decVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpPistaP",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arreglo ::= declaraArreglo IGUAL elementosArreglo 
            {
              Arreglo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arreglo arr = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<Expresion>> elem = (ArrayList<ArrayList<Expresion>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		arr.setValores(elem); RESULT= arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arreglo ::= declaraArreglo 
            {
              Arreglo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo arr = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elementosArreglo ::= elementosArreglo LLAVEABRE listElementos LLAVECIERRA 
            {
              ArrayList<ArrayList<Expresion>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<ArrayList<Expresion>> e = (ArrayList<ArrayList<Expresion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> elem = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 e.add(elem); RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementosArreglo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elementosArreglo ::= LLAVEABRE listElementos LLAVECIERRA 
            {
              ArrayList<ArrayList<Expresion>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<ArrayList<Expresion>> elem= new ArrayList();
                                                    elem.add(e);
                                                    RESULT= elem;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementosArreglo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listElementos ::= listElementos COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> elementos = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		elementos.add(e); RESULT= elementos;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listElementos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listElementos ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> elementos = new ArrayList();
                            elementos.add(e);
                            RESULT = elementos;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listElementos",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaraArreglo ::= VAR tipos ARREGLO listaID dimensionesArr 
            {
              Arreglo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> id = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimensionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimensionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dimension = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Arreglo(tipo, id.get(0), dimension.size(), dimension);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraArreglo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dimensionesArr ::= dimensionesArr CORCHETEIZ expresion CORCHETEDER 
            {
              ArrayList<Expresion> RESULT =null;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Expresion> dimensiones = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		dimensiones.add(e); RESULT= dimensiones;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensionesArr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dimensionesArr ::= CORCHETEIZ expresion CORCHETEDER 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Expresion> dimensiones = new ArrayList();
                             dimensiones.add(e);
                                RESULT = dimensiones;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensionesArr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MetodoFuncioDec ::= KEEP MetodoFuncion 
            {
              Instruccion RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion met = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Class c = met.getClass();
                                                    if(c.getName().contains("Metodo")){
                                                        ((Metodo)met).setIsKeep(true);
                                                        RESULT= met;
                                                    }else if(c.getName().contains("Funcion")){
                                                        ((Funcion)met).setIsKeep(true);
                                                        RESULT= met;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncioDec",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MetodoFuncioDec ::= MetodoFuncion 
            {
              Instruccion RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion met = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= met;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncioDec",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MetodoFuncioDec ::= VOID MetodoFuncion 
            {
              Instruccion RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion met = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= met;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncioDec",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipos ::= SENTERO 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipos ::= SDOBLE 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipos ::= SBOOLEAN 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.BOOL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipos ::= SCARACTER 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos ::= SCADENA 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decrementosuma ::= expresion SUMASUMA 
            {
              DecIncremento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DecIncremento(exp, DecIncremento.TipoDecIncremento.masmas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementosuma",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decrementosuma ::= expresion MENOSMENOS 
            {
              DecIncremento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DecIncremento(exp, DecIncremento.TipoDecIncremento.menosmenos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementosuma",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decrementosuma ::= expresion 
            {
              DecIncremento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecIncremento(exp, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementosuma",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias ::= arreglo PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arreglo sent = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencias ::= declaracionVar PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencias ::= llamadaAsignacionSentencias PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencias ::= decrementosuma PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecIncremento sent = (DecIncremento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencias ::= sentenciaIfElse 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaIf sent = (SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencias ::= switchsentencia 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencias ::= forSentencia 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias ::= mientrasSentecia 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencias ::= hacerMientrasSentencia 
            {
              Instruccion RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencias ::= CONTINUESENTENCE PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =(Instruccion) sentencia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencias ::= BREAKSENTENCE PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sentencia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Instruccion) sentencia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencias ::= RETURNSENTENCE PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Instruccion)ret; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= MENSAJE PARABRE expresion PARCIERRA PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  Instruccion ins = new Mensaje(exp);
                          RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= MetodoFuncionNative PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int funNatvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funNatvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion funNatva = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = funNatva; ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencias ::= error sentencias 
            {
              Instruccion RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sen = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sen; ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaSentencias ::= listaSentencias sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> instrucciones = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                instrucciones.add(sent);
                                                RESULT = instrucciones;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaSentencias ::= sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                ArrayList<Instruccion> instrucciones = new ArrayList();
                                                instrucciones.add(sent);
                                                RESULT = instrucciones;
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaraVar ::= VAR tipos listaID 
            {
              Instruccion RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tip = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> idList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Simbolo> simbolos = new ArrayList();
                                    for (int i = 0; i < idList.size(); i++) {
                                        simbolos.add(new Simbolo(idList.get(i), tip , idListleft ,idListright));
                                    }
		RESULT = new Declaracion(simbolos,tip, false );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaraVar ::= KEEP VAR tipos listaID 
            {
              Instruccion RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tip = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> idList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Simbolo> simbolos = new ArrayList();
                                    for (int i = 0; i < idList.size(); i++) {
                                        simbolos.add(new Simbolo(idList.get(i), tip , idListleft ,idListright));
                                    }
		RESULT = new Declaracion(simbolos,tip, false );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaraVar ::= tipos listaID 
            {
              Instruccion RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tip = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> idList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Simbolo> simbolos = new ArrayList();
                                    for (int i = 0; i < idList.size(); i++) {
                                        simbolos.add(new Simbolo(idList.get(i), tip , idListleft ,idListright));
                                    }
		RESULT = new Declaracion(simbolos,tip, false );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaraVar ::= KEEP tipos listaID 
            {
              Instruccion RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tip = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> idList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Simbolo> simbolos = new ArrayList();
                                    for (int i = 0; i < idList.size(); i++) {
                                        simbolos.add(new Simbolo(idList.get(i), tip , idListleft ,idListright));
                                    }
		RESULT = new Declaracion(simbolos,tip, false );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionVar ::= declaraVar IGUAL expresion 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    Declaracion decl= (Declaracion) dec;
                                                     RESULT = new Asignacion(decl.getIds(), exp, expleft, expright);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracionVar ::= declaraVar IGUAL MetodoFuncionNative 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcionNativaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionNativaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion funcionNativa = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Declaracion decl= (Declaracion) dec;
                                                    RESULT = new Asignacion(decl.getIds(), funcionNativa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracionVar ::= declaraVar 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Declaracion)dec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listaID ::= listaID COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int lsIdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsIdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> lsIds = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lsIds.add(id.toString());
                                                RESULT = lsIds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaID ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> ids = new ArrayList();
                             ids.add(id.toString());
                                RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaID",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // llamadaAsignacionSentencias ::= IDENTIFICADOR IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaAsignacionSentencias",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamadaAsignacionSentencias ::= IDENTIFICADOR IGUAL MetodoFuncionNative 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcionNativaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcionNativaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion funcionNativa = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id.toString(), funcionNativa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaAsignacionSentencias",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamadaAsignacionSentencias ::= IDENTIFICADOR dimensionesArr IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReasignarValorArreglo(id.toString(), exp, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaAsignacionSentencias",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaIfElse ::= IF PARABRE expresion PARCIERRA LLAVEABRE listaSentencias LLAVECIERRA 
            {
              SentenciaIf RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SentenciaIf(exp, sent, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfElse",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaIfElse ::= IF PARABRE expresion PARCIERRA LLAVEABRE listaSentencias LLAVECIERRA ELSE LLAVEABRE listaSentencias LLAVECIERRA 
            {
              SentenciaIf RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sentElse = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SentenciaIf( exp, sent,new SentenciaElse(sentElse), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfElse",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaIfElse ::= IF PARABRE expresion PARCIERRA LLAVEABRE listaSentencias LLAVECIERRA ELSE sentenciaIfElse 
            {
              SentenciaIf RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentElseIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentElseIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentenciaIf sentElseIf = (SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SentenciaIf(exp, sent, null,new SentenciaIfElse(sentElseIf)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfElse",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTINUESENTENCE ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUESENTENCE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BREAKSENTENCE ::= SALIR 
            {
              Object RESULT =null;
		RESULT= new Salir();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKSENTENCE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETURNSENTENCE ::= RETORNA expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new Return(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNSENTENCE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETURNSENTENCE ::= RETORNA 
            {
              Object RESULT =null;
		RESULT = new Return(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNSENTENCE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LLAVEABRE LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new SwitchInstruccion(exp, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LLAVEABRE caselist defaultOp LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int caselsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caselsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Case> casels = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Default def = (Default)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SwitchInstruccion(exp, casels, def); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LLAVEABRE caselist LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caselsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caselsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Case> casels = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SwitchInstruccion(exp, casels, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LLAVEABRE defaultOp LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Default def = (Default)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SwitchInstruccion(exp, null, def); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // caselist ::= caselist caseFinal 
            {
              ArrayList<Case> RESULT =null;
		int casesFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Case> casesF = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case casef = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                        casesF.add(casef);
                                        RESULT = casesF; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caselist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // caselist ::= caseFinal 
            {
              ArrayList<Case> RESULT =null;
		int casefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case casef = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Case> cases = new ArrayList();
                                        cases.add(casef);
                                        RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caselist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // caseFinal ::= CASO expresion DOSPUNTOS listaSentencias 
            {
              Case RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Case(exp, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseFinal",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // caseFinal ::= CASO expresion DOSPUNTOS 
            {
              Case RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseFinal",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // defaultOp ::= DEFAULT DOSPUNTOS listaSentencias 
            {
              Default RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Default(sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defaultOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // defaultOp ::= DEFAULT DOSPUNTOS 
            {
              Default RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defaultOp",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forSentencia ::= PARA PARABRE asignacionesFor PUNTOYCOMA expresion PUNTOYCOMA parFor PARCIERRA LLAVEABRE listaSentencias LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DeclaracionFor asign = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asignForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asignForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object asignFor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(asign, expr, asign, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forSentencia",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // forSentencia ::= PARA PARABRE asignacionesFor PUNTOYCOMA expresion PUNTOYCOMA parFor PARCIERRA LLAVEABRE LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DeclaracionFor asign = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int asignForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asignForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asignFor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new For(asign, expr, asign, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forSentencia",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parFor ::= declaracionVar 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parFor ::= decrementosuma 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecIncremento dec = (DecIncremento)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = dec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFor",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // asignacionesFor ::= tipos IDENTIFICADOR IGUAL expresion 
            {
              DeclaracionFor RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionFor((Simbolo.Tipo)tipo, id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionesFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // asignacionesFor ::= IDENTIFICADOR IGUAL expresion 
            {
              DeclaracionFor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionFor(null, id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionesFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // asignacionesFor ::= VAR tipos IDENTIFICADOR IGUAL expresion 
            {
              DeclaracionFor RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionFor((Simbolo.Tipo)tipo, id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionesFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // mientrasSentecia ::= MIENTRAS PARABRE expresion PARCIERRA LLAVEABRE listaSentencias LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> list = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While( expr,list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientrasSentecia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // mientrasSentecia ::= MIENTRAS PARABRE expresion PARCIERRA LLAVEABRE LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new While( expr,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientrasSentecia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // hacerMientrasSentencia ::= HACER LLAVEABRE listaSentencias LLAVECIERRA MIENTRAS PARABRE expresion PARCIERRA 
            {
              Instruccion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Instruccion> list = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(expr,list);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacerMientrasSentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // hacerMientrasSentencia ::= HACER LLAVEABRE LLAVECIERRA MIENTRAS PARABRE expresion PARCIERRA 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(expr,null);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacerMientrasSentencia",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MetodoFuncion ::= tipos IDENTIFICADOR PARABRE declaracionParametro PARCIERRA LLAVEABRE listaSentenciasMetodo LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Funcion(id.toString(), param, (ArrayList<Instruccion>)ls, (Simbolo.Tipo)tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MetodoFuncion ::= tipos IDENTIFICADOR PARABRE PARCIERRA LLAVEABRE listaSentenciasMetodo LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Funcion(id.toString(), null,(ArrayList<Instruccion>) ls, (Simbolo.Tipo)tipo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MetodoFuncion ::= IDENTIFICADOR PARABRE declaracionParametro PARCIERRA LLAVEABRE listaSentenciasMetodo LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(id.toString(), params,(ArrayList<Instruccion>)ls ,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MetodoFuncion ::= IDENTIFICADOR PARABRE PARCIERRA LLAVEABRE listaSentenciasMetodo LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(id.toString(), null, (ArrayList<Instruccion>)ls,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MetodoFuncion ::= PRINCIPAL PARABRE PARCIERRA LLAVEABRE listaSentenciasMetodo LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(id.toString(), null, (ArrayList<Instruccion>)ls, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // listaSentenciasMetodo ::= listaSentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> list = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listaSentenciasMetodo ::= 
            {
              ArrayList<Instruccion> RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MetodoFuncionNative ::= REPRODUCIR PARABRE notas COMA expresion COMA expresion COMA expresion PARCIERRA 
            {
              Instruccion RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object nota = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Reproducir(nota.toString(), exp1,exp2, exp3 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MetodoFuncionNative ::= ESPERAR PARABRE num COMA num PARCIERRA 
            {
              Instruccion RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ms = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object canal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Esperar((Integer)ms, (Integer)canal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MetodoFuncionNative ::= ORDENAR PARABRE parSumarizar COMA formaOrdenar PARCIERRA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Ordenar((Expresion)exp,f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MetodoFuncionNative ::= SUMARIZAR PARABRE parSumarizar PARCIERRA 
            {
              Instruccion RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sumarizar((Expresion) sum); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MetodoFuncionNative ::= LONGITUD PARABRE parLongitud PARCIERRA 
            {
              Instruccion RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion sum = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Longitud(sum);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MetodoFuncionNative ::= error PUNTOYCOMA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // formaOrdenar ::= ASCENDENTE 
            {
              String RESULT =null;
		RESULT = "ascendente";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // formaOrdenar ::= DESCENDENTE 
            {
              String RESULT =null;
		RESULT = "descendente";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // formaOrdenar ::= PARES 
            {
              String RESULT =null;
		RESULT = "pares";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // formaOrdenar ::= IMPARES 
            {
              String RESULT =null;
		RESULT = "impares";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // formaOrdenar ::= PRIMOS 
            {
              String RESULT =null;
		RESULT = "primos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parSumarizar ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identificador(p.toString(),pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parSumarizar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parSumarizar ::= declaracionesArr 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parSumarizar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parLongitud ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identificador(p.toString(),pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parLongitud",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parLongitud ::= CADENA 
            {
              Expresion RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.STRING, cadena.toString(),cadenaleft, cadenaright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parLongitud",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parLongitud ::= declaracionesArr 
            {
              Expresion RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = (Expresion) arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parLongitud",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // num ::= ENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=  Integer. parseInt(num.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // num ::= DECIMAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=  Integer. parseInt(num.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // notas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    String nota = Nota.ComprobarNota(id.toString());
                    if(nota!= null){
                        RESULT = nota;
                    }else{
                        RESULT = null;
                    }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declaracionParametro ::= parametro COMA declaracionParametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(params!=null){
                                                                                        params.add((Parametro)param); 
                                                                                        RESULT = params;
                                                                                    }else{
                                                                                        RESULT= null;
                                                                                    }
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declaracionParametro ::= parametro 
            {
              ArrayList<Parametro> RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Parametro> params = new ArrayList(); 
                                                                        params.add((Parametro)parametro);
                                                                        RESULT = params;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaracionParametro ::= ERRORSENTENCE COMA declaracionParametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracionParametro ::= ERRORSENTENCE 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametro ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametro((Simbolo.Tipo)tipo, id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= expr 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= (Expresion) exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= primitivas 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= (Expresion) exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= IDENTIFICADOR dimensionesArr 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expresion> dim = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Expresion)new LlamadaArreglo(id.toString(), "Arreglo", dim); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.STRING,new String(id.toString()), idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, der, Operacion.Operador.MENOS_UNARIO, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= NOT expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, der, Operacion.Operador.NOT, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= ESNULO expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, der, Operacion.Operador.NULO, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.SUMA, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.RESTA, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= expresion ASTERISCO expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MULTIPLICACION, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= expresion DIV expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.DIVISION, derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.POTENCIA, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MODULO, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MAYOR_QUE, derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MENOR_QUE, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= expresion MAYORIGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MAYOR_IGUA_QUE, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= expresion MENORIGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MENOR_IGUA_QUE, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= expresion IGUAL IGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.IGUAL_IGUAL, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr ::= expresion NOIGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.NOI_GUAL, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.AND, derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.NAND,derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.OR,  derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.NOR,derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.XOR,derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr ::= PARABRE expresion PARCIERRA 
            {
              Expresion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr ::= IDENTIFICADOR MASIGUAL expresion 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Operacion(new Identificador(id.toString(), idleft, idright),e, Operacion.Operador.SUMA, idleft, idright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr ::= IDENTIFICADOR PARABRE listaExpresion PARCIERRA 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Expresion)new LlamadaFuncion(id.toString(), e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr ::= IDENTIFICADOR PARABRE PARCIERRA 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = (Expresion)new LlamadaFuncion(id.toString(), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // primitivas ::= DECIMAL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.DOUBLE,new Double(p.toString()), pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // primitivas ::= ENTERO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.INT, Integer.valueOf(p.toString()), pleft,pright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // primitivas ::= CADENA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.STRING, p.toString(), pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // primitivas ::= CHAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.CHAR,p.toString().charAt(0), pleft, pright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // primitivas ::= BOOLF 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.BOOL,false, pleft, pright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // primitivas ::= BOOLT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.BOOL,true, pleft, pright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // listaExpresion ::= listaExpresion COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int lsexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> lsexp = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lsexp.add(exp);
                                            RESULT= lsexp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // listaExpresion ::= expresion PUNTOYCOMA 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ArrayList<Expresion> ex= new ArrayList();
                                            ex.add(exp);
                                            RESULT= ex;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ERRORSENTENCE ::= FINALERROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORSENTENCE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FINALERROR ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALERROR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
